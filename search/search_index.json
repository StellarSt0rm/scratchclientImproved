{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"scratchclientImproved Documentation","text":"<p>This is the documentation for scratchclientImproved.</p>"},{"location":"#installation","title":"Installation","text":"<p>Go to your terminal (not your python shell) and execute this command: <pre><code>pip install scratchclientImproved\n</code></pre></p> <p>If this didn't work for whatever reason, open your python shell and run the following: <pre><code>import os; os.system(\"pip install scratchclientImproved\")\n</code></pre></p> <p>scratchclientImproved requires Python 3.7; however, it will work for almost all use cases on Python 3.6.</p>"},{"location":"#get-started","title":"Get Started","text":"<pre><code>from scratchclientImproved import ScratchSession\n\nsession = ScratchSession(\"UwU\", \"--uwu--\")\n\n# post comments\nsession.get_user(\"Paddle2See\").post_comment(\"OwO\")\n\n# lots of other stuff\nprint(session.get_project(450216269).get_comments()[0].content)\nprint(session.get_project(450216269).get_comments()[0].get_replies()[0].content)\nprint(session.get_studio(29251822).description)\n</code></pre>"},{"location":"#cloud-connection","title":"Cloud Connection","text":"<pre><code>from scratchclientImproved import ScratchSession\n\nsession = ScratchSession(\"griffpatch\", \"SecurePassword7\")\n\nconnection = session.create_cloud_connection(450216269)\n\nconnection.set_cloud_variable(\"variable name\", 5000)\n\n@connection.on(\"set\")\ndef on_set(variable):\n    print(variable.name, variable.value)\n\nprint(connection.get_cloud_variable(\"other variable\"))\n</code></pre> <p>See the examples for more code samples.</p>"},{"location":"#cli","title":"CLI","text":"<p>scratchclientImproved has a command line interface for retrieving Scratch website data from the command line. Use <code>python3 -m scratchclientImproved help</code> to get started.</p>"},{"location":"replit/","title":"Usage on Replit","text":"<p>Scratch blocks most requests from the Replit, so you must work around it. To log into Scratch, instead of using your password, you can use your token and session ID.</p> <p>You can obtain your session ID by opening your browser developer tools, going to Application &gt; Storage (or just Storage), then finding \"scratchsessionsid\" and copying the cookie value.</p> <p></p> <p>You can obtain your token by running this in your browser console: <pre><code>alert(\n  document.getElementById('app')._reactRootContainer._internalRoot\n  .current.child.pendingProps.store.getState()\n  .session.session.user.token\n);\n</code></pre></p> <p>Then copying the value that flashes on your screen.</p> <p>Then, to log in to scratchclientImproved, use this code: <pre><code>from scratchclientImproved import ScratchSession\n\nsession = ScratchSession(\"username\", session_id=\"session ID here\", token=\"token here\")\n</code></pre></p> <p>However, a lot of functionality still might not work. Sites like Glitch could serve your purpose in that case- or you can just host it on your own computer.</p>"},{"location":"examples/basic-usage/","title":"Basic Usage","text":""},{"location":"examples/basic-usage/#get-started","title":"Get Started","text":"<pre><code>from scratchclientImproved import ScratchSession\n\nsession = ScratchSession(\"UwU\", \"--uwu--\")\n\n# post comments\nsession.get_user(\"Paddle2See\").post_comment(\"OwO\")\n\n# lots of other stuff\nprint(session.get_project(450216269).get_comments()[0].content)\nprint(session.get_project(450216269).get_comments()[0].get_replies()[0].content)\nprint(session.get_studio(29251822).description)\n</code></pre>"},{"location":"examples/basic-usage/#cloud-connection","title":"Cloud Connection:","text":"<pre><code>from scratchclientImproved import ScratchSession\n\nsession = ScratchSession(\"griffpatch\", \"SecurePassword7\")\n\nconnection = session.create_cloud_connection(450216269)\n\nconnection.set_cloud_variable(\"variable name\", 5000)\n\n@connection.on(\"set\")\ndef on_set(variable):\n    print(variable.name, variable.value)\n\nprint(connection.get_cloud_variable(\"other variable\"))\n</code></pre>"},{"location":"examples/simultaneous-connections/","title":"Simultaneous Connections","text":"<p>This shows how to use scratchclientImproved's asynchronous features to have two simulataneous cloud connections to different projects.</p> message_passer.py<pre><code># Passes messages between two projects, a pretty simple concept\n# Both projects have variables called \"Request\" and \"Received\"\n\nimport asyncio\nfrom scratchclientImproved import ScratchSession\n\nsession = ScratchSession(\"griffpatch\", \"hunter2\")\n\n# These would be replaced with your actual project IDs\nconnections = [\n    session.create_cloud_connection(1239123091, is_async=True), \n    session.create_cloud_connection(1285894890, is_async=True)\n]\n\nfor i, connection in enumerate(connections):\n    @connection.on(\"set\")\n    async def on_set(variable):\n        if variable.name == \"Request\":\n            other_connection = connections[1 - i]\n            await other_connection.set_cloud_variable(\"Received\", variable.value)\n\ncoroutines = [connection.connect() for connection in connections]\nasyncio.run(asyncio.gather(*coroutines))\n</code></pre>"},{"location":"examples/stats-viewer/","title":"Stats Viewer","text":"<p>This is the server code for a \"stats viewer\" project.</p> stats_viewer.py<pre><code># This stats viewer can retrieve a user's follower and following count\n# This assumes that the project has four cloud variables: \"Follower Count Request\",\n# \"Follower Count Response\", \"Following Count Request\",\n# and \"Following Count Response\". The \"Follower Count Request\" and\n# \"Following Count Request\" variables will be set\n# by people using the project, and will contain the username of the user\n# requesting the data, a delimiter, and the username of the user for which \n# they want the statistics. The \"Follower Count Response\" and \"Following Count Response\"\n# variables will be set by the server (this program) and will contain the username\n# of the user who sent the request, a delimiter, and the number of followers.\n\n\nfrom scratchclientImproved import ScratchSession\n\nsession = ScratchSession(\"griffpatch\", \"badpassword\")\n\ncharacter_set = \" abcdefghijklmnopqrstuvwxyz1234567890-_\"\n\ndef decode_request(request):\n    # An example request would be something like 02150200101505\n    # If you decode this using the character set, it would become \"Bob\", then a space, then \"Joe\"\n    # Bob is the user who sent the request and Joe is the user that which they want to know the follower count of\n    decoded = \"\"\n    for i in range(0, len(request), 2):\n        # This loops through the request, two characters at a time\n        decoded += character_set[int(request[i: i+2])]\n\n    # Split it into the requester and the requested username\n    return request.split(\" \")\n\ndef encode_response(username, count):\n    # An example response would be something like 021502001000\n    # Everything until the first instead of 00 will be decoded\n    # and the decoded value is \"Bob\". After that is the actual\n    # follower count\n    response = \"\"\n    for char in username:\n        # Add a 0 to the beginning of the number if there isn't any\n        response += str(character_set.index(char)).zfill(2)\n\n    response += f\"00{count}\"\n    return response\n\n\n# You would replace the number with your actual project ID\nconnection = session.create_cloud_connection(1032938129)\n\n# This means that the `on_set` function will run every time someone else changes a cloud variable.\n@connection.on(\"set\")\ndef on_set(variable):\n    if variable.name == \"Follower Count Request\" or variable.name == \"Following Count Request\":\n        requester_username, requested_username = decode_request(variable.value)\n        count = session.scraping.get_follower_count(requested_username)\n        if variable.name == \"Follower Count Request\"\n        else session.scraping.get_following_count(requested_username)\n\n        # We need to encode the requester username so the client\n        # knows which response is theirs and not someone else's\n        response = encode_response(requester_username, count)\n\n        # The response variable name is the same name with \"Request\"\n        # replaced with \"Response\"\n        response_variable_name = variable.name.replace(\"Request\", \"Response\")\n        connection.set_cloud_variable(response_variable_name, response)\n</code></pre>"},{"location":"reference/Activity/","title":"Activity","text":""},{"location":"reference/Activity/#properties","title":"Properties","text":""},{"location":"reference/Activity/#type","title":"<code>type : Literal[\"followuser\"] | Literal[\"followstudio\"] | Literal[\"loveproject\"], Literal[\"favoriteproject\"] | Literal[\"remixproject\"] | Literal[\"becomecurator\"] | Literal[\"becomeownerstudio\"] | Literal[\"shareproject\"] | Literal[\"addprojecttostudio\"] | Literal[\"removeprojectstudio\"] | Literal[\"updatestudio\"] | Literal[\"removecuratorstudio\"] | Literal[\"becomehoststudio\"]</code>","text":"<p>The type of activity that the activity is. This can be any of the following:</p> <ul> <li><code>\"followuser\"</code> - Occurs when the actor follows someone.</li> <li><code>\"followstudio\"</code> - Occurs when the actor follows a studio.</li> <li><code>\"loveproject\"</code> - Occurs when the actor loves a project.</li> <li><code>\"favoriteproject\"</code> - Occurs when the actor favorites a project.</li> <li><code>\"remixproject\"</code> - Occurs when the actor remixes a project.</li> <li><code>\"becomecurator\"</code> - Occurs when someone becomes a curator of a studio.</li> <li><code>\"becomeownerstudio\"</code> - Occurs when someone is promoted to manager of a studio.</li> <li><code>\"becomehoststudio\"</code> - Occurs when someone becomes the host of a studio.</li> <li><code>\"shareproject\"</code> - Occurs when the actor shares a project.</li> <li><code>\"addprojectotstudio\"</code> - Occurs when someone adds a project to a studio.</li> <li><code>\"removeprojectstudio\"</code> - Occurs when someone removes a project from a studio.</li> <li><code>\"updatestudio\"</code> - Occurs when someone updates the title, thumbnail, or description of a studio.</li> <li><code>\"removecuratorstudio\"</code> - Occurs when a curator is removed from a studio.</li> </ul>"},{"location":"reference/Activity/#actor","title":"<code>actor : str</code>","text":"<p>The username of the person who caused the actvity (I.E. the person who loved a project or updated the title of a studio).</p>"},{"location":"reference/Activity/#created_timestamp","title":"<code>created_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the activity was created.</p> <p>A <code>Activity</code> might have other attributes depending on its <code>type</code> and where it came from.</p>"},{"location":"reference/Activity/#actor_id","title":"<code>actor_id : int</code>","text":"<p>Appears everywhere except from calls to ScrapingSession.get_user_activity. This is the user ID of the actor who caused the activity.</p>"},{"location":"reference/Activity/#id","title":"<code>id : str</code>","text":"<p>The ID of the activity. Appears only from calls to Studio.get_activity. This is the activity <code>type</code> followed by a hyphen <code>-</code> and some numbers.</p>"},{"location":"reference/Activity/#followed_username","title":"<code>followed_username : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"followuser\"</code>. This is the username of the user who has been followed.</p>"},{"location":"reference/Activity/#project_id","title":"<code>project_id : int</code>","text":"<p>Appears when the <code>type</code> is either <code>\"loveproject\"</code>, <code>\"favoriteproject\"</code> or <code>\"remixproject\"</code>. This is the ID of the project that was loved, favorited, or remixed.</p>"},{"location":"reference/Activity/#title","title":"<code>title : str</code>","text":"<p>Appears when the <code>type</code> is either <code>\"followstudio\"</code>, <code>\"loveproject\"</code>, <code>\"remixproject\"</code>, <code>\"becomecurator\"</code>, or <code>\"shareproject\"</code>. If the activity was related to a studio, this is the title of the studio it involved. Otherwise, this is the title of the project it involved.</p>"},{"location":"reference/Activity/#project_title","title":"<code>project_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"favoriteproject\"</code>, <code>\"addprojecttostudio\"</code>, or <code>\"removeprojectfromstudio\"</code>. This is the title of the project that the activity involves.</p>"},{"location":"reference/Activity/#parent_id","title":"<code>parent_id : int</code>","text":"<p>Appears when the <code>type</code> is <code>\"remixproject\"</code>. This is the ID of the parent project that has been remixed.</p>"},{"location":"reference/Activity/#parent_title","title":"<code>parent_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"remixproject\"</code>. This is the title of the parent project that has been remixed.</p>"},{"location":"reference/Activity/#recipient_username","title":"<code>recipient_username : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"becomeownerstudio\"</code> or <code>\"becomehoststudio\"</code>. This is the username of the user who has become manager or host of the studio.</p>"},{"location":"reference/Activity/#username","title":"<code>username : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"becomecurator\"</code> or <code>\"removecuratorstudio\"</code>. This is the username of the person who added or removed the curator.</p>"},{"location":"reference/Activity/#gallery_id","title":"<code>gallery_id : int</code>","text":"<p>Appears when the <code>type</code> is <code>\"followstudio\"</code>, <code>\"becomecurator\"</code>, or <code>\"becomeownerstudio\"</code>. This is the ID of the studio where the action occurred.</p>"},{"location":"reference/Activity/#gallery_title","title":"<code>gallery_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"becomeownerstudio\"</code>. This is the title of the studio where the action occurred.</p>"},{"location":"reference/AsyncCloudConnection/","title":"CloudConnection","text":""},{"location":"reference/AsyncCloudConnection/#properties","title":"Properties","text":""},{"location":"reference/AsyncCloudConnection/#project_id","title":"<code>project_id : int</code>","text":"<p>The ID of the project that the connection is on.</p>"},{"location":"reference/AsyncCloudConnection/#cloud_host","title":"<code>cloud_host : str</code>","text":"<p>The hostname of the server where the cloud variables are hosted.</p>"},{"location":"reference/AsyncCloudConnection/#methods","title":"Methods","text":""},{"location":"reference/AsyncCloudConnection/#run","title":"<code>run()</code>","text":"<p>Connects to the server and starts listening for variable changes.</p> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931, is_async=True)\n\n@connection.on(\"connect\")\nasync def on_connect():\n    print(\"Connected!\")\n\n@connection.on(\"set\")\nasync def on_set(variable):\n    print(variable.name, variable.value)\n\nconnection.run()\n</code></pre>"},{"location":"reference/AsyncCloudConnection/#connect","title":"<code>await connect()</code>","text":"<p>Connects to the server and starts listening for variable changes. Equivalent to AsyncCloudConnection.run except it's a coroutine. Must be called with <code>await</code>.</p>"},{"location":"reference/AsyncCloudConnection/#get_cloud_variable","title":"<code>get_cloud_variable(name)</code>","text":"<p>Gets the value of a cloud variable with the specified name.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> </ul> <p>RETURNS - <code>str</code></p> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931, is_async=True)\n\n@connection.on(\"connect\")\nasync def on_connect():\n    print(connection.get_cloud_variable(\"High score\"))\n    # 102930921\n\nconnection.run()\n</code></pre>"},{"location":"reference/AsyncCloudConnection/#set_cloud_variable","title":"<code>await set_cloud_variable(name, value)</code>","text":"<p>Sets the value of a cloud variable with the specified name to the specified value. You can only do this 10 times per second. This function must be used with <code>await</code>.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> <li>value (<code>str</code>) - The value you want to set the cloud variable to. This must be less than 256 characters long and all digits.</li> </ul> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931, is_async=True)\n\n@connection.on(\"connect\")\nasync def on_connect():\n    await connection.set_cloud_variable(\"High score\", 102930921)\n    print(connection.get_cloud_variable(\"High score\"))\n    # 102930921\n\nconnection.run()\n</code></pre>"},{"location":"reference/AsyncCloudConnection/#create_cloud_variable","title":"<code>await create_cloud_variable(name, initial_value=0)</code>","text":"<p>Creates a cloud variable with the specified name and sets it to the specified initial value. You can only do this 10 times per second. This function must be used with <code>await</code>.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the new variable.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> <li>initial_value (<code>int</code>) - The value you want to set the cloud variable to. This must be less than 256 characters long and all digits.</li> </ul> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931, is_async=True)\n\n@connection.on(\"connect\")\nasync def on_connect():\n    await connection.create_cloud_variable(\"High score\", 10)\n\nconnection.run()\n</code></pre> <p>Note</p> <p>This will not update live for other people using the project.</p>"},{"location":"reference/AsyncCloudConnection/#delete_cloud_variable","title":"<code>await delete_cloud_variable(name)</code>","text":"<p>Deletes a cloud variable with the specified name. You can only do this 10 times per second. This function must be used with <code>await</code>.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable to be deleted.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> </ul> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931, is_async=True)\n\n@connection.on(\"connect\")\ndef on_connect():\n    await connection.delete_cloud_variable(\"High score\")\n\nconnection.run()\n</code></pre> <p>Note</p> <p>This will not update live for other people using the project.</p>"},{"location":"reference/AsyncCloudConnection/#on","title":"<code>on(key, callback=None, once=False)</code>","text":"<p>Adds an event for the connection listen to. This can either be used as a decorator or a function.</p> <p>PARAMETERS</p> <ul> <li>key (<code>str</code>) - The key of the event to be listened to.</li> <li>callback (<code>callable</code>) - The function that will run when the event occurs.</li> <li>once (<code>bool</code>) - Whether the event should only be fired once.</li> </ul> <p>RETURNS - <code>None | callable</code></p> <p>Example:</p> <pre><code># Use as a function\nasync def on_set(variable):\n    print(variable.name, variable.value)\n\nconnection.on(\"set\", on_set)\n\n# Use as a decorator\n@connection.on(\"set\")\nasync def on_set(variable):\n    print(variable.name, variable.value)\n</code></pre>"},{"location":"reference/AsyncCloudConnection/#off","title":"<code>off(key, callback)</code>","text":"<p>Removes an event that the connection was listening to.</p> <p>PARAMETERS</p> <ul> <li>key (<code>str</code>) - The key of the event to be removed.</li> <li>callback (<code>callable</code>) - The function that runs when the event occurs.</li> </ul> <p>Example:</p> <pre><code>async def on_set(variable):\n    print(variable.name, variable.value)\n\nconnection.on(\"set\", on_set)\nconnection.off(\"set\", on_set)\n\nconnection.run()\n</code></pre>"},{"location":"reference/AsyncCloudConnection/#once","title":"<code>once(key, callback=None)</code>","text":"<p>Adds an event for the connection listen to. The event will only be fired once. This can either be used as a decorator or a function.</p> <p>PARAMETERS</p> <ul> <li>key (<code>str</code>) - The key of the event to be listened to.</li> <li>callback (<code>callable</code>) - The function that will run when the event occurs.</li> </ul> <p>RETURNS - <code>None | callable</code></p> <p>Example:</p> <pre><code># Use as a function\nasync def on_set(variable):\n    print(variable.name, variable.value)\n\nconnection.once(\"set\", on_set)\n\n# Use as a decorator\n@connection.once(\"set\")\nasync def on_set(variable):\n    print(variable.name, variable.value)\n</code></pre>"},{"location":"reference/AsyncCloudConnection/#listeners","title":"<code>listeners(event)</code>","text":"<p>Returns all the functions that are attached to the event <code>event</code>.</p> <p>PARAMETERS</p> <ul> <li>event (<code>event</code>) - The key of the event that you want to retrieve the listeners of.</li> </ul> <p>RETURNS - <code>list[callable]</code></p> <p>Example:</p> <pre><code>@connection.on(\"set\")\nasync def on_set(variable):\n    print(variable.name, variable.value)\n\nprint(connection.listeners(\"set\"))\n# &lt;function on_set at 0x31290093&gt;\n\nconnection.run()\n</code></pre>"},{"location":"reference/AsyncCloudConnection/#events","title":"Events","text":""},{"location":"reference/AsyncCloudConnection/#handshake","title":"<code>handshake</code>","text":"<p>Fired after the WebSocket connection handshake occurs.</p>"},{"location":"reference/AsyncCloudConnection/#connect_1","title":"<code>connect</code>","text":"<p>Fired when the WebSocket connection has finished and is ready to receive data.</p>"},{"location":"reference/AsyncCloudConnection/#outgoing","title":"<code>outgoing</code>","text":"<p>Fired when data is sent to the server.</p> <p>PARAMETERS</p> <ul> <li>data (<code>str</code>) - The data that is being sent.</li> </ul>"},{"location":"reference/AsyncCloudConnection/#change","title":"<code>change</code>","text":"<p>Fired when a variable value changes, no matter who changed it.</p> <p>PARAMETERS</p> <ul> <li>variable (<code>CloudVariable</code>) - The variable that has been changed, as a CloudVariable.</li> </ul>"},{"location":"reference/AsyncCloudConnection/#set","title":"<code>set</code>","text":"<p>Fired when a variable value changes, by anyone except yourself.</p> <p>PARAMETERS</p> <ul> <li>variable (<code>CloudVariable</code>) - The variable that has been changed, as a CloudVariable.</li> </ul>"},{"location":"reference/AsyncCloudConnection/#create","title":"<code>create</code>","text":"<p>Fired when a cloud variable has been created.</p> <p>PARAMETERS</p> <ul> <li>variable (<code>CloudVariable</code>) - The variable that has been created, as a CloudVariable.</li> </ul>"},{"location":"reference/AsyncCloudConnection/#delete","title":"<code>delete</code>","text":"<p>Fired when a cloud variable has been deleted.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable that has been deleted. This includes the cloud emoji at the beginning (\"\u2601 \").</li> </ul>"},{"location":"reference/BackpackItem/","title":"BackpackItem","text":""},{"location":"reference/BackpackItem/#properties","title":"Properties","text":""},{"location":"reference/BackpackItem/#id","title":"<code>id : str</code>","text":"<p>The ID of the backpack item (a UUID).</p>"},{"location":"reference/BackpackItem/#name","title":"<code>name : str</code>","text":"<p>The name of the item.</p>"},{"location":"reference/BackpackItem/#body_URL","title":"<code>body_URL : str</code>","text":"<p>The URL of the content of the item.</p>"},{"location":"reference/BackpackItem/#thumbnail_URL","title":"<code>thumbnail_URL : str</code>","text":"<p>The URL of the thumbnail of the item.</p>"},{"location":"reference/BackpackItem/#mime","title":"<code>mime : Literal[\"application/zip\"] | Literal[\"application/json\"] | Literal[\"audio/x-wav\"] | Literal[\"audio/mp3\"] | Literal[\"image/svg+xml\"] | Literal[\"image/png\"]</code>","text":"<p>The MIME type of the item.</p>"},{"location":"reference/BackpackItem/#type","title":"<code>type : Literal[\"script\"] | Literal[\"costume\"] | Literal[\"sound\"] | Literal[\"sprite\"]</code>","text":"<p>The type of item that the item is.</p>"},{"location":"reference/BackpackItem/#methods","title":"Methods","text":""},{"location":"reference/BackpackItem/#delete","title":"<code>delete()</code>","text":"<p>Deletes the item. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>import base64\nfrom PIL import Image\nfrom io import BytesIO\n\ncostume_file = open(\"furry.png\", \"rb\")\nbody = base64.b64encode(costume_file.read())\n\nimage = Image.open(\"furry.png\")\nwith BytesIO() as f:\n    image.save(f, format=\"JPEG\")\n    thumbnail = base64.b64encode(f.getvalue())\n    item = session.add_to_backpack(\"costume\", body, \"image/png\", \"furry\", thumbnail)\n    item.delete()\n</code></pre>"},{"location":"reference/CloudConnection/","title":"CloudConnection","text":""},{"location":"reference/CloudConnection/#properties","title":"Properties","text":""},{"location":"reference/CloudConnection/#project_id","title":"<code>project_id : int</code>","text":"<p>The ID of the project that the connection is on.</p>"},{"location":"reference/CloudConnection/#cloud_host","title":"<code>cloud_host : str</code>","text":"<p>The hostname of the server where the cloud variables are hosted.</p>"},{"location":"reference/CloudConnection/#methods","title":"Methods","text":""},{"location":"reference/CloudConnection/#get_cloud_variable","title":"<code>get_cloud_variable(name)</code>","text":"<p>Gets the value of a cloud variable with the specified name.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> </ul> <p>RETURNS - <code>str</code></p> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931)\nprint(connection.get_cloud_variable(\"High score\"))\n# 102930921\n</code></pre>"},{"location":"reference/CloudConnection/#set_cloud_variable","title":"<code>set_cloud_variable(name, value)</code>","text":"<p>Sets the value of a cloud variable with the specified name to the specified value. You can only do this 10 times per second.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> <li>value (<code>str</code>) - The value you want to set the cloud variable to. This must be less than 256 characters long and all digits.</li> </ul> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931)\nconnection.set_cloud_variable(\"High score\", 102930921)\nprint(connection.get_cloud_variable(\"High score\"))\n# 102930921\n</code></pre>"},{"location":"reference/CloudConnection/#create_cloud_variable","title":"<code>create_cloud_variable(name, initial_value=0)</code>","text":"<p>Creates a cloud variable with the specified name and sets it to the specified initial value. You can only do this 10 times per second.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the new variable.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> <li>initial_value (<code>int</code>) - The value you want to set the cloud variable to. This must be less than 256 characters long and all digits.</li> </ul> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931)\nconnection.create_cloud_variable(\"High score\", 10)\n</code></pre> <p>Note</p> <p>This will not update live for other people using the project.</p>"},{"location":"reference/CloudConnection/#delete_cloud_variable","title":"<code>delete_cloud_variable(name)</code>","text":"<p>Deletes a cloud variable with the specified name. You can only do this 10 times per second.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable to be deleted.  The name does not necessarily need to include the cloud emoji (\"\u2601\ufe0f \").</li> </ul> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(193290310931)\nconnection.delete_cloud_variable(\"High score\")\n</code></pre> <p>Note</p> <p>This will not update live for other people using the project.</p>"},{"location":"reference/CloudConnection/#on","title":"<code>on(key, callback=None, once=False)</code>","text":"<p>Adds an event for the connection listen to. This can either be used as a decorator or a function.</p> <p>PARAMETERS</p> <ul> <li>key (<code>str</code>) - The key of the event to be listened to.</li> <li>callback (<code>callable</code>) - The function that will run when the event occurs.</li> <li>once (<code>bool</code>) - Whether the event should only be fired once.</li> </ul> <p>RETURNS - <code>None | callable</code></p> <p>Example:</p> <pre><code># Use as a function\ndef on_set(variable):\n    print(variable.name, variable.value)\n\nconnection.on(\"set\", on_set)\n\n# Use as a decorator\n@connection.on(\"set\")\ndef on_set(variable):\n    print(variable.name, variable.value)\n</code></pre>"},{"location":"reference/CloudConnection/#off","title":"<code>off(key, callback)</code>","text":"<p>Removes an event that the connection was listening to.</p> <p>PARAMETERS</p> <ul> <li>key (<code>str</code>) - The key of the event to be removed.</li> <li>callback (<code>callable</code>) - The function that runs when the event occurs.</li> </ul> <p>Example:</p> <pre><code>def on_set(variable):\n    print(variable.name, variable.value)\n\nconnection.on(\"set\", on_set)\nconnection.off(\"set\", on_set)\n</code></pre>"},{"location":"reference/CloudConnection/#once","title":"<code>once(key, callback=None)</code>","text":"<p>Adds an event for the connection listen to. The event will only be fired once. This can either be used as a decorator or a function.</p> <p>PARAMETERS</p> <ul> <li>key (<code>str</code>) - The key of the event to be listened to.</li> <li>callback (<code>callable</code>) - The function that will run when the event occurs.</li> </ul> <p>RETURNS - <code>None | callable</code></p> <p>Example:</p> <pre><code># Use as a function\ndef on_set(variable):\n    print(variable.name, variable.value)\n\nconnection.once(\"set\", on_set)\n\n# Use as a decorator\n@connection.once(\"set\")\ndef on_set(variable):\n    print(variable.name, variable.value)\n</code></pre>"},{"location":"reference/CloudConnection/#listeners","title":"<code>listeners(event)</code>","text":"<p>Returns all the functions that are attached to the event <code>event</code>.</p> <p>PARAMETERS</p> <ul> <li>event (<code>event</code>) - The key of the event that you want to retrieve the listeners of.</li> </ul> <p>RETURNS - <code>list[callable]</code></p> <p>Example:</p> <pre><code>@connection.on(\"set\")\ndef on_set(variable):\n    print(variable.name, variable.value)\n\nprint(connection.listeners(\"set\"))\n# &lt;function on_set at 0x31290093&gt;\n</code></pre>"},{"location":"reference/CloudConnection/#events","title":"Events","text":""},{"location":"reference/CloudConnection/#handshake","title":"<code>handshake</code>","text":"<p>Fired after the WebSocket connection handshake occurs.</p>"},{"location":"reference/CloudConnection/#connect","title":"<code>connect</code>","text":"<p>Fired when the WebSocket connection has finished and is ready to receive data.</p>"},{"location":"reference/CloudConnection/#outgoing","title":"<code>outgoing</code>","text":"<p>Fired when data is sent to the server.</p> <p>PARAMETERS</p> <ul> <li>data (<code>str</code>) - The data that is being sent.</li> </ul>"},{"location":"reference/CloudConnection/#change","title":"<code>change</code>","text":"<p>Fired when a variable value changes, no matter who changed it.</p> <p>PARAMETERS</p> <ul> <li>variable (<code>CloudVariable</code>) - The variable that has been changed, as a CloudVariable.</li> </ul>"},{"location":"reference/CloudConnection/#set","title":"<code>set</code>","text":"<p>Fired when a variable value changes, by anyone except yourself.</p> <p>PARAMETERS</p> <ul> <li>variable (<code>CloudVariable</code>) - The variable that has been changed, as a CloudVariable.</li> </ul>"},{"location":"reference/CloudConnection/#create","title":"<code>create</code>","text":"<p>Fired when a cloud variable has been created.</p> <p>PARAMETERS</p> <ul> <li>variable (<code>CloudVariable</code>) - The variable that has been created, as a CloudVariable.</li> </ul>"},{"location":"reference/CloudConnection/#delete","title":"<code>delete</code>","text":"<p>Fired when a cloud variable has been deleted.</p> <p>PARAMETERS</p> <ul> <li>name (<code>str</code>) - The name of the variable that has been deleted. This includes the cloud emoji at the beginning (\"\u2601 \").</li> </ul>"},{"location":"reference/CloudVariable/","title":"CloudVariable","text":""},{"location":"reference/CloudVariable/#properties","title":"Properties","text":""},{"location":"reference/CloudVariable/#name","title":"<code>name : str</code>","text":"<p>The name of the cloud variable.</p>"},{"location":"reference/CloudVariable/#value","title":"<code>value : str</code>","text":"<p>The value of the cloud variable.</p>"},{"location":"reference/ForumPost/","title":"ForumPost","text":""},{"location":"reference/ForumPost/#properties","title":"Properties","text":""},{"location":"reference/ForumPost/#id","title":"<code>id : int</code>","text":"<p>The ID of the forum post.</p>"},{"location":"reference/ForumPost/#title","title":"<code>title : str</code>","text":"<p>The title of the forum post.</p>"},{"location":"reference/ForumPost/#link","title":"<code>link : str</code>","text":"<p>A link to the forum post.</p>"},{"location":"reference/ForumPost/#published","title":"<code>published : str</code>","text":"<p>An ISO 8601 timestamp representing the date the post was created.</p>"},{"location":"reference/ForumPost/#author","title":"<code>author : str</code>","text":"<p>The username of the author of the forum post.</p>"},{"location":"reference/ForumPost/#content","title":"<code>content : str</code>","text":"<p>The content of the forum post.</p>"},{"location":"reference/ForumSession/","title":"ForumSession","text":""},{"location":"reference/ForumSession/#methods","title":"Methods","text":""},{"location":"reference/ForumSession/#create_topic","title":"<code>create_topic(category_id, title, body)</code>","text":"<p>Creates a forum topic. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>category_id (<code>int | str</code>) - The ID of the forum category you want to post in. For example, the ID of the \"Suggestions\" category is <code>31</code>.</li> <li>title (<code>str</code>) - The title of the original post in the topic.</li> <li>body (<code>str</code>) - The body of the original post in the topic.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.forums.create_topic(1, \"Add like button to comments\", \"Title.\\nSupporters:\\n\\nNobody yet!\")\n</code></pre>"},{"location":"reference/ForumSession/#post","title":"<code>post(topic_id, content)</code>","text":"<p>Posts a forum post on the specified topic. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>topic_id (<code>int | str</code>) - The ID of the topic you want to post on.</li> <li>content (<code>str</code>) - The content of the post.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.forums.post(506810, \"This sucks\")\n</code></pre>"},{"location":"reference/ForumSession/#edit_post","title":"<code>edit_post(post_id, content)</code>","text":"<p>Edits the forum post with the specified ID. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>post_id (<code>int | str</code>) - The ID of the post you want to edit.</li> <li>content (<code>str</code>) - The new content of the post.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ForumSession/#report_post","title":"<code>report_post(post_id, reason)</code>","text":"<p>Reports the forum post with the specified ID. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>post_id (<code>int | str</code>) - The ID of the post you want to report.</li> <li>reason (<code>str</code>) - The reason you want to report the post.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ForumSession/#get_post_source","title":"<code>get_post_source(post_id)</code>","text":"<p>Gets the BBCode source of the forum post with the specified ID.</p> <p>PARAMETERS</p> <ul> <li>post_id (<code>int | str</code>) - The ID of the post.</li> </ul> <p>RETURNS - <code>str</code></p>"},{"location":"reference/ForumSession/#follow_topic","title":"<code>follow_topic(topic_id)</code>","text":"<p>Follows the forum topic with the specified ID. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>topic (<code>int | str</code>) - The ID of the topic you want to follow.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ForumSession/#unfollow_topic","title":"<code>unfollow_topic(topic_id)</code>","text":"<p>Unfollows the forum topic with the specified ID. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>topic (<code>int | str</code>) - The ID of the topic you want to unfollow.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ForumSession/#change_signature","title":"<code>change_signature(signature)</code>","text":"<p>Changes your forum signature to a new signature. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>signature (<code>str</code>) - The signature you want to change your signature to.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ForumSession/#get_latest_topic_posts","title":"<code>get_latest_topic_posts(topic_id)</code>","text":"<p>Gets the latest posts on the specified forum topic. Returns an array of ForumPost objects.</p> <p>PARAMETERS</p> <ul> <li>topic_id (<code>int | str</code>) - The ID of the topic you want to get the latest posts on.</li> </ul> <p>RETURNS - <code>list[ForumPost]</code></p> <p>Example:</p> <pre><code>print(session.forums.get_latest_topic_posts(506810)[0].content)\n# scratchclient sucks\n</code></pre>"},{"location":"reference/ForumSession/#get_latest_category_posts","title":"<code>get_latest_category_posts(category_id)</code>","text":"<p>Gets the latest posts on the specified forum category. Returns an array of ForumPost objects.</p> <p>PARAMETERS</p> <ul> <li>topic_id (<code>int | str</code>) - The ID of the category you want to get the latest posts on. For example, the ID of the \"Suggestions\" forum category is <code>1</code>.</li> </ul> <p>RETURNS - <code>list[ForumPost]</code></p> <p>Example:</p> <pre><code>print(session.forums.get_latest_category_posts(31)[0].content)\n# scratchclient sucks\n</code></pre>"},{"location":"reference/IncompleteProject/","title":"IncompleteProject","text":"<p>A class that represents a project with less data than a Project object.</p>"},{"location":"reference/IncompleteProject/#properties","title":"Properties","text":""},{"location":"reference/IncompleteProject/#title","title":"<code>title : str</code>","text":"<p>The title of the project.</p>"},{"location":"reference/IncompleteProject/#id","title":"<code>id : int</code>","text":"<p>The project ID of the project.</p>"},{"location":"reference/IncompleteProject/#author","title":"<code>author : str</code>","text":"<p>The username of the project's creator.</p>"},{"location":"reference/IncompleteProject/#thumbnail_URL","title":"<code>thumbnail_URL : str</code>","text":"<p>The URL of the project's thumbnail.</p> <p>An <code>IncompleteProject</code> might have other attributes depending on where it came from:</p>"},{"location":"reference/IncompleteProject/#type","title":"<code>type : Literal[\"project\"]</code>","text":"<p>This is a string that is always <code>\"project\"</code>. It only appears when returned from a call to <code>ScratchSession.get_front_page</code>.</p>"},{"location":"reference/IncompleteProject/#love_count","title":"<code>love_count : int</code>","text":"<p>The number of loves the project has. It only appears when returned from a call to <code>ScratchSession.get_front_page</code>.</p>"},{"location":"reference/IncompleteProject/#remixers_count","title":"<code>remixers_count : int</code>","text":"<p>The number of remixes the project has. It only appears in the <code>\"top_remixed\"</code> and <code>scratch_design_studio</code> items of the dictionary returned from a call to <code>ScratchSession.get_front_page</code>.</p>"},{"location":"reference/IncompleteProject/#curator_name","title":"<code>curator_name : str</code>","text":"<p>The username of Scratch's current Front Page Curator. It only appears in the <code>\"curated\"</code> item when returned from a call to <code>ScratchSession.get_front_page</code>.</p>"},{"location":"reference/IncompleteProject/#gallery_id","title":"<code>gallery_id : int</code>","text":"<p>The ID of Scratch's current Scratch Design Studio. It only appears in the <code>\"scratch_design_studio\"</code> item when returned from a call to <code>ScratchSession.get_front_page</code>.</p>"},{"location":"reference/IncompleteProject/#gallery_title","title":"<code>gallery_title : str</code>","text":"<p>The title of Scratch's current Scratch Design Studio. It only appears in the <code>\"scratch_design_studio\"</code> item when returned from a call to <code>ScratchSession.get_front_page</code>.</p>"},{"location":"reference/IncompleteProject/#creator_id","title":"<code>creator_id : int</code>","text":"<p>The user ID of the project's creator. It only appears when returned from a call to <code>Studio.get_projects</code>.</p>"},{"location":"reference/IncompleteProject/#avatar","title":"<code>avatar : dict</code>","text":"<p>A dictionary containing different images with the author's avatar (profile picture). Contains the items <code>\"90x90\"</code>, <code>\"60x60\"</code>, <code>\"55x55\"</code>, <code>\"50x50\"</code>, and <code>\"32x32\"</code>, either corresponding to a URL to a different size of the avatar. It only appears when returned from a call to <code>Studio.get_projects</code>.</p>"},{"location":"reference/IncompleteProject/#actor_id","title":"<code>actor_id : int</code>","text":"<p>The user ID of the user who added the project to the studio. It only appears when returned from a call to <code>Studio.get_projects</code>.</p>"},{"location":"reference/IncompleteProject/#datetime_modified","title":"<code>datetime_modified : str</code>","text":"<p>An ISO 8601 timestamp representing the date the project was last modified. It only appears when returned from a call to <code>UserProfile.get_featured_project</code>.</p>"},{"location":"reference/IncompleteStudio/","title":"IncompleteStudio","text":"<p>A class that represents a studio with less data than a Studio object.</p>"},{"location":"reference/IncompleteStudio/#properties","title":"Properties","text":""},{"location":"reference/IncompleteStudio/#id","title":"<code>id : int</code>","text":"<p>The ID of the studio.</p>"},{"location":"reference/IncompleteStudio/#title","title":"<code>title : str</code>","text":"<p>The title of the studio.</p>"},{"location":"reference/IncompleteStudio/#thumbnail_URL","title":"<code>thumbnail_URL : str</code>","text":"<p>The URL of the studio's thumbnail.</p>"},{"location":"reference/IncompleteUser/","title":"IncompleteUser","text":"<p>A class that represents a user with less data than a User object.</p>"},{"location":"reference/IncompleteUser/#properties","title":"Properties","text":""},{"location":"reference/IncompleteUser/#username","title":"<code>username : str</code>","text":"<p>The username of the user.</p>"},{"location":"reference/IncompleteUser/#id","title":"<code>id : int</code>","text":"<p>The user ID of the user.</p>"},{"location":"reference/IncompleteUser/#scratchteam","title":"<code>scratchteam : bool</code>","text":"<p>The boolean value representing whether the user is a member of the Scratch Team or not.</p>"},{"location":"reference/IncompleteUser/#joined_timestamp","title":"<code>joined_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the user joined Scratch.</p>"},{"location":"reference/IncompleteUser/#avatar_URL","title":"<code>avatar_URL : str</code>","text":"<p>The URL of the user's avatar (profile picture).</p>"},{"location":"reference/Message/","title":"Message","text":""},{"location":"reference/Message/#properties","title":"Properties","text":""},{"location":"reference/Message/#type","title":"<code>type : Literal[\"followuser\"] | Literal[\"loveproject\"] | Literal[\"favoriteproject\"] | Literal[\"addcomment\"] | Literal[\"curatorinvite\"] | Literal[\"remixproject\"] | Literal[\"studioactivity\"] | Literal[\"forumpost\"] | Literal[\"becomeownerstudio\"] | Literal[\"becomehoststudio\"] | Literal[\"userjoin\"]</code>","text":"<p>The type of message that the message is. This can be any of the following:</p> <ul> <li><code>\"followuser\"</code> - Received when someone follows you.</li> <li><code>\"loveproject\"</code> - Received when someone loves one of your projects.</li> <li><code>\"favoriteproject\"</code> - Received when someone favorites one of your projects.</li> <li><code>\"addcomment\"</code> - Received when someone comments on your profile or replies to one of your comments.</li> <li><code>\"curatorinvite\"</code> - Received when you are invited to become a curator of a studio.</li> <li><code>\"remixproject\"</code> - Received when someone remixes one of your projects.</li> <li><code>\"studioactivity\"</code> - Received when there is activity in a studio that you curate.</li> <li><code>\"forumpost\"</code> - Received when there is a post on a forum topic you either follow or own.</li> <li><code>\"becomeownerstudio\"</code> - Received when you become manager of a studio.</li> </ul> <p>Note</p> <p>I wonder if this is why they changed the name to \"host\" instead of \"owner\".</p> <ul> <li><code>\"becomehoststudio\"</code> - Received when you become the host of a studio.</li> <li><code>\"userjoin\"</code> - Received when you join Scratch.</li> </ul>"},{"location":"reference/Message/#actor","title":"<code>actor : str</code>","text":"<p>The username of the person who caused the message to be sent (I.E. the person who sent a comment or caused activity in a studio).</p>"},{"location":"reference/Message/#actor_id","title":"<code>actor_id : int</code>","text":"<p>The user ID of the person who caused the message to be sent.</p>"},{"location":"reference/Message/#created_timestamp","title":"<code>created_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the message was created.</p> <p>A <code>Message</code> might have other attributes depending on its <code>type</code>.</p>"},{"location":"reference/Message/#project_id","title":"<code>project_id : int</code>","text":"<p>Appears when the <code>type</code> is either <code>\"loveproject\"</code>, <code>\"favoriteproject\"</code> or <code>\"remixproject\"</code>. This is the ID of the project that was loved, favorited, or remixed.</p>"},{"location":"reference/Message/#title","title":"<code>title : str</code>","text":"<p>Appears when the <code>type</code> is either <code>\"loveproject\"</code>, <code>\"remixproject\"</code>, <code>\"curatorinvite\"</code>, or <code>\"studioactivity\"</code>. If the <code>type</code> is <code>\"loveproject\"</code> or <code>\"remixproject\"</code>, this is the title of the project where the action occurred. Otherwise, this is the title of the studio where the action occurred.</p>"},{"location":"reference/Message/#project_title","title":"<code>project_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"favoriteproject\"</code>. This is the title of the project being favorited.</p>"},{"location":"reference/Message/#parent_id","title":"<code>parent_id : int</code>","text":"<p>Appears when the <code>type</code> is <code>\"remixproject\"</code>. This is the ID of the parent project that has been remixed.</p>"},{"location":"reference/Message/#parent_title","title":"<code>parent_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"remixproject\"</code>. This is the title of the parent project that has been remixed.</p>"},{"location":"reference/Message/#comment_id","title":"<code>comment_id : int</code>","text":"<p>Appears when the <code>type</code> is <code>\"addcomment\"</code>. This is the ID of the comment that was sent.</p>"},{"location":"reference/Message/#comment_fragment","title":"<code>comment_fragment : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"addcomment\"</code>. This is the fragment of the comment that is shown in the message.</p>"},{"location":"reference/Message/#commentee_username","title":"<code>commentee_username : str | None</code>","text":"<p>Appears when the <code>type</code> is <code>\"addcomment\"</code>. If the comment is a reply, this is the username of the person who was replied to. Otherwise, this is <code>None</code>.</p>"},{"location":"reference/Message/#comment_obj_id","title":"<code>comment_obj_id : int</code>","text":"<p>Appears when the <code>type</code> is <code>\"addcomment\"</code>. This is the ID of the user, project, or studio where the comment was posted.</p>"},{"location":"reference/Message/#comment_obj_title","title":"<code>comment_obj_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"addcomment\"</code>. If the comment occurred on a studio or project, this is the title of the studio or project. Otherwise, this is the username of the user whose profile the comment was posted on.</p>"},{"location":"reference/Message/#comment_type","title":"<code>comment_type : Literal[0] | Literal[1] | Literal[2]</code>","text":"<p>Appears when the <code>type</code> is <code>\"addcomment\"</code>. If the comment occurred on a project, this is <code>0</code>. If it occurred on a profile, this is <code>1</code>. If it occurred on a studio, this is <code>2</code>.</p>"},{"location":"reference/Message/#gallery_id","title":"<code>gallery_id : int</code>","text":"<p>Appears when the <code>type</code> is <code>\"curatorinvite\"</code>, <code>\"studioactivity\"</code>, <code>\"becomeownerstudio\"</code>, or <code>\"becomehoststudio\"</code>. This is the ID of the studio where the action occurred.</p>"},{"location":"reference/Message/#gallery_title","title":"<code>gallery_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"becomeownerstudio\"</code>, or <code>\"becomehoststudio\"</code>. This is the title of the studio where the action occurred.</p>"},{"location":"reference/Message/#topic_id","title":"<code>topic_id : int</code>","text":"<p>Appears when the <code>type</code> is <code>\"forumpost\"</code>. This is the ID of the topic where the post occurred.</p>"},{"location":"reference/Message/#topic_title","title":"<code>topic_title : str</code>","text":"<p>Appears when the <code>type</code> is <code>\"forumpost\"</code>. This is the title of the topic where the post occurred.</p>"},{"location":"reference/News/","title":"News","text":""},{"location":"reference/News/#properties","title":"Properties","text":""},{"location":"reference/News/#id","title":"<code>id : int</code>","text":"<p>The ID of the news item.</p>"},{"location":"reference/News/#title","title":"<code>title : str</code>","text":"<p>The title of the news item.</p>"},{"location":"reference/News/#image_URL","title":"<code>image_URL : str</code>","text":"<p>The URL of the image next to the news item.</p>"},{"location":"reference/News/#timestamp","title":"<code>timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the news item was created.</p>"},{"location":"reference/News/#description","title":"<code>description : str</code>","text":"<p>The description of the news item.</p>"},{"location":"reference/News/#src","title":"<code>src : str</code>","text":"<p>The URL the news item links to.</p>"},{"location":"reference/ProfileComment/","title":"ProfileComment","text":""},{"location":"reference/ProfileComment/#properties","title":"Properties","text":""},{"location":"reference/ProfileComment/#id","title":"<code>id : int</code>","text":"<p>The ID of the comment.</p>"},{"location":"reference/ProfileComment/#parent_id","title":"<code>parent_id : int | None</code>","text":"<p>If the comment is a reply, this is the ID of its parent comment. Otherwise, it is <code>None</code>.</p>"},{"location":"reference/ProfileComment/#commentee_id","title":"<code>commentee_id : int | None</code>","text":"<p>If the comment is a reply, this is the user ID of the author of the parent comment. Otherwise, it is <code>None</code>.</p>"},{"location":"reference/ProfileComment/#content","title":"<code>content : str</code>","text":"<p>The content of the comment.</p>"},{"location":"reference/ProfileComment/#replies","title":"<code>replies : list[ProfileComment]</code>","text":"<p>A list of the replies to the comment, as an array of ProfileComment objects.</p>"},{"location":"reference/ProfileComment/#author","title":"<code>author : str</code>","text":"<p>The username of the author of the comment.</p>"},{"location":"reference/ProfileComment/#author_id","title":"<code>author_id : int</code>","text":"<p>The user ID of the author of the comment.</p>"},{"location":"reference/ProfileComment/#created_timestamp","title":"<code>created_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the comment was created.</p>"},{"location":"reference/ProfileComment/#last_modified_timestamp","title":"<code>last_modified_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the comment was last modified.</p> <p>Note</p> <p>I have no idea what the hell this means.</p>"},{"location":"reference/ProfileComment/#visible","title":"<code>visible : bool</code>","text":"<p>A boolean value representing whether the comment has been deleted or not.</p>"},{"location":"reference/ProfileComment/#user","title":"<code>user : str</code>","text":"<p>The username of the user whose profile the comment is on.</p>"},{"location":"reference/ProfileComment/#methods","title":"Methods","text":""},{"location":"reference/ProfileComment/#delete","title":"<code>delete()</code>","text":"<p>Deletes the comment. You must be logged in and the owner of the profile the comment is on for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ProfileComment/#report","title":"<code>report()</code>","text":"<p>Reports the comment. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ProfileComment/#reply","title":"<code>reply(content)</code>","text":"<p>Replies to the comment. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content of your reply.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>comment = session.scraping.get_profile_comments(\"griffpatch\")[0]\ncomment.reply(\"Go away\")\n</code></pre>"},{"location":"reference/Project/","title":"Project","text":""},{"location":"reference/Project/#properties","title":"Properties","text":""},{"location":"reference/Project/#id","title":"<code>id : int</code>","text":"<p>The ID of the project.</p> <p>Example:</p> <pre><code>print(session.get_project(104).id)\n# 104\n</code></pre>"},{"location":"reference/Project/#title","title":"<code>title : str</code>","text":"<p>The title of the project.</p> <p>Example:</p> <pre><code>print(session.get_project(104).title)\n# Weekend\n</code></pre>"},{"location":"reference/Project/#instructions","title":"<code>instructions : str</code>","text":"<p>The instructions of the project.</p>"},{"location":"reference/Project/#description","title":"<code>description : str</code>","text":"<p>The description of the project (the \"Notes and Credits\" field).</p>"},{"location":"reference/Project/#visible","title":"<code>visible : bool</code>","text":"<p>A boolean value representing whether the project is deleted or not.</p>"},{"location":"reference/Project/#public","title":"<code>public : bool</code>","text":"<p>A boolean value representing whether the project is shared or not.</p>"},{"location":"reference/Project/#comments_allowed","title":"<code>comments_allowed : bool</code>","text":"<p>A boolean value representing if comments are allowed on the project.</p>"},{"location":"reference/Project/#is_published","title":"<code>is_published : bool</code>","text":"<p>A boolean value representing whether the project has been shared or not.</p> <p>Note</p> <p>I'm not all too sure about the difference between <code>public</code> and <code>is_published</code>, but I believe the difference is that projects that have <code>is_published</code> as <code>True</code> could be unshared, but taken down by the Scratch Team, whereas <code>public</code> projects must be visible to everyone.</p>"},{"location":"reference/Project/#author","title":"<code>author : IncompleteUser</code>","text":"<p>The author of the project as an IncompleteUser object.</p>"},{"location":"reference/Project/#thumbnail_URL","title":"<code>thumbnail_URL : str</code>","text":"<p>The URL of the thumbnail of the project.</p>"},{"location":"reference/Project/#created_timestamp","title":"<code>created_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the project was created.</p> <p>Example:</p> <pre><code>import datetime\n\ndef iso_to_readable(iso):\n    timezone = datetime.datetime.now(datetime.timezone.utc).astimezone().tzinfo\n\n    date = datetime.datetime.fromisoformat(iso.replace(\"Z\", \"+00:00\"))\n    date.astimezone(timezone)\n\n    return date.strftime(\"%Y-%m-%d %I:%M %p\")\n\nprint(iso_to_readable(session.get_project(104).created_timestamp))\n# 2007-03-05 10:47 AM\n</code></pre>"},{"location":"reference/Project/#last_modified_timestamp","title":"<code>last_modified_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the project was most recently modified.</p>"},{"location":"reference/Project/#shared_timestamp","title":"<code>shared_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the project was shared.</p>"},{"location":"reference/Project/#view_count","title":"<code>view_count : int</code>","text":"<p>The number of views the project has.</p>"},{"location":"reference/Project/#love_count","title":"<code>love_count : int</code>","text":"<p>The number of loves (hearts) the project has.</p>"},{"location":"reference/Project/#favorite_count","title":"<code>favorite_count : int</code>","text":"<p>The number of favorites (stars) the project has.</p>"},{"location":"reference/Project/#remix_count","title":"<code>remix_count : int</code>","text":"<p>The number of remixes the project has.</p>"},{"location":"reference/Project/#parent","title":"<code>parent : int | None</code>","text":"<p>If the project is a remix, this is the project ID of the immediate parent of the project (the project it was remixed from). Otherwise, this is <code>None</code>.</p>"},{"location":"reference/Project/#root","title":"<code>root : int | None</code>","text":"<p>If the project is a remix, this is the project ID of the root project of the project (the original project it was remixed from). Otherwise, this is <code>None</code>.</p> <p>Example:</p> <pre><code>project = session.get_project(149159110)\n\nprint(f\"\"\"\nBased on project {project.parent}.\nThanks to the original project {project.root}.\n\"\"\")\n</code></pre>"},{"location":"reference/Project/#is_remix","title":"<code>is_remix : bool | None</code>","text":"<p>A boolean value representing whether the project is a remix.</p>"},{"location":"reference/Project/#methods","title":"Methods","text":""},{"location":"reference/Project/#get_comment","title":"<code>get_comment(comment_id)</code>","text":"<p>Gets a comment on the project with the ID <code>comment_id</code> as a ProjectComment object.</p> <p>PARAMETERS</p> <ul> <li>comment_id (<code>int</code>) - The comment ID of the comment to be retrieved</li> </ul> <p>RETURNS - <code>ProjectComment</code></p> <p>Example:</p> <pre><code>print(session.get_project(104).get_comment(488).content)\n# I personally like it fuzz\n</code></pre>"},{"location":"reference/Project/#love","title":"<code>love()</code>","text":"<p>Loves the project. Returns a <code>bool</code> representing whether the user has loved the project.</p> <p>RETURNS - <code>bool</code></p>"},{"location":"reference/Project/#unlove","title":"<code>unlove()</code>","text":"<p>Unloves the project. Returns a <code>bool</code> representing whether the user has loved the project.</p> <p>RETURNS - <code>bool</code></p>"},{"location":"reference/Project/#favorite","title":"<code>favorite()</code>","text":"<p>Favorites the project. Returns a <code>bool</code> representing whether the user has favorited the project.</p> <p>RETURNS - <code>bool</code></p>"},{"location":"reference/Project/#unfavorite","title":"<code>unfavorite()</code>","text":"<p>Unfavorites the project. Returns a <code>bool</code> representing whether the user has favorited the project.</p> <p>RETURNS - <code>bool</code></p>"},{"location":"reference/Project/#get_scripts","title":"<code>get_scripts()</code>","text":"<p>Gets the scripts in the project, as a <code>dict</code> with the same structure as the <code>project.json</code> file found in projects.</p> <p>RETURNS - <code>dict</code></p> <p>Example:</p> <pre><code>scripts = session.get_project(104).get_scripts()\n\nprint(f\"The first sprite is called '{scripts['targets'][1]['name']}'\")\n# The first sprite is called 'girl'\n</code></pre>"},{"location":"reference/Project/#save","title":"<code>save(project)</code>","text":"<p>Saves the project with the scripts specified in the parameter <code>project</code>. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>project (<code>dict</code>) - The scripts to be put in the project, with the same format as the <code>project.json</code> file found in ordinary projects.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#get_remixes","title":"<code>get_remixes(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of remixes of the project. Returns an array of Project objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single remix or just <code>limit</code> remixes.</li> <li>limit (<code>Optional[int]</code>) - How many remixes to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the remixes from the newest ones - i.e. an offset of 20 would give you the next 20 remixes after the first 20.</li> </ul> <p>RETURNS - <code>list[Project]</code></p> <p>Example:</p> <pre><code>print(session.get_project(10128407).get_remixes()[0].title)\n# Paper Minecraft 3D\n</code></pre>"},{"location":"reference/Project/#get_studios","title":"<code>get_studios(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of studios the project is in. Returns an array of Studio objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single studio or just <code>limit</code> studios.</li> <li>limit (<code>Optional[int]</code>) - How many studios to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the studios from the newest ones - i.e. an offset of 20 would give you the next 20 studios after the first 20.</li> </ul> <p>RETURNS - <code>list[Studio]</code></p> <p>Example:</p> <pre><code>print(session.get_project(10128407).get_studios()[0].title)\n# Griffpatch's epic games!!\n</code></pre>"},{"location":"reference/Project/#get_remixtree","title":"<code>get_remixtree()</code>","text":"<p>Gets the data in the tree of remixes of the project. This data is used to construct the <code>remixtree</code> page (this is an example) Returns an array of RemixtreeProject objects, which is a list of the projects in the tree.</p> <p>RETURNS - <code>list[RemixtreeProject]</code></p> <p>Example:</p> <pre><code>print(session.get_project(104).get_remixtree()[0].title)\n# Weekend Remake\n</code></pre>"},{"location":"reference/Project/#get_comments","title":"<code>get_comments(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of comments on the project. Returns an array of ProjectComment objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single comment or just <code>limit</code> comments.</li> <li>limit (<code>Optional[int]</code>) - How many comments to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the comments from the newest ones - i.e. an offset of 20 would give you the next 20 comments after the first 20.</li> </ul> <p>RETURNS - <code>list[ProjectComment]</code></p> <p>Example:</p> <pre><code>print(session.get_project(10128407).get_comments()[0].content)\n# follow me please\n</code></pre>"},{"location":"reference/Project/#get_cloud_logs","title":"<code>get_cloud_logs(all=False, limit=20, offset=0)</code>","text":"<p>Gets the cloud logs on the project. Returns an array of <code>dict</code>s containing the logs.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single log or just <code>limit</code> logs.</li> <li>limit (<code>Optional[int]</code>) - How many logs to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the logs from the newest ones - i.e. an offset of 20 would give you the next 20 logs after the first 20.</li> </ul> <p>RETURNS - <code>list[dict]</code></p> <p>Example:</p> <pre><code>print(session.get_project(12785898).get_cloud_logs()[0][\"verb\"])\n# set_var\n</code></pre>"},{"location":"reference/Project/#post_comment","title":"<code>post_comment(content, parent_id=\"\", commentee_id=\"\")</code>","text":"<p>Posts a comment on the project. You must be logged in for this to not throw an error. Returns the posted comment as a <code>ProjectComment</code>.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content of the comment to be posted.</li> <li>parent_id (<code>Optional[Literal[\"\"] | int]</code>) - If the comment to be posted is a reply, this is the comment ID of the parent comment. Otherwise, this is an empty string <code>\"\"</code>.</li> <li>commentee_id (<code>Optiona[Literal[\"\"] | int]</code>) - If the comment to be posted is a reply, this is the user ID of the author of the parent comment. Otherwise, this an empty string <code>\"\"</code>.</li> </ul> <p>RETURNS - <code>ProjectComment</code></p> <p>Example:</p> <pre><code>session.get_project(104).post_comment(\"OMG first project on Scratch\")\nsession.get_project(104).post_comment(\"OMG first comment on the first project on scratch\", parent_id=488, commentee_id=6493)\n</code></pre>"},{"location":"reference/Project/#get_visibility","title":"<code>get_visibility()</code>","text":"<p>Gets the visibility and moderation status of the project. You must be logged in and the owner of the project for this to not throw an error. Returns the data as a <code>dict</code>, with the following items:</p> <ul> <li>projectId - The ID of the project (an <code>int</code>).</li> <li>creatorId - The user ID of the creator of the project (an <code>int</code>).</li> <li>deleted - Whether or not the project is deleted (a <code>bool</code>).</li> <li>censored - Whether the project was censored -- this could either be automatically or by the Scratch Team (a <code>bool</code>).</li> <li>censoredByAdmin - Whether the project was censored by the Scratch Team (a <code>bool</code>).</li> <li>censoredByCommunity - Whether the project was censored automatically by community reports (a <code>bool</code>).</li> <li>reshareable - Whether the project can be reshared (a <code>bool</code>).</li> <li>message - If the project was censored, this is the message from the Scratch Team containing the reason why the project was censored. Otherwise, this is an empty string <code>\"\"</code>.</li> </ul> <p>RETURNS - <code>dict</code></p> <p>Example:</p> <pre><code>print(session.get_project(391293821809312).get_visibility()[\"censoredByAdmin\"])\n# True\n</code></pre>"},{"location":"reference/Project/#toggle_comments","title":"<code>toggle_commenting()</code>","text":"<p>Toggles whether people can post comments on the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns the project.</p> <p>RETURNS - <code>Project</code></p>"},{"location":"reference/Project/#turn_on_commenting","title":"<code>turn_on_commenting()</code>","text":"<p>Enables commenting on the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns the project.</p> <p>RETURNS - <code>Project</code></p>"},{"location":"reference/Project/#turn_off_commenting","title":"<code>turn_off_commenting()</code>","text":"<p>Disables commenting on the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns the project.</p> <p>RETURNS - <code>Project</code></p> <p>Example:</p> <pre><code>project = session.get_project(19032190120)\nproject.post_comment(\"Closing comments until this project gets 100 loves\")\nproject.turn_off_commenting()\n</code></pre>"},{"location":"reference/Project/#report","title":"<code>report(category, reason, image=None)</code>","text":"<p>Reports the project, for the specified <code>category</code> and <code>reason</code>. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>category (<code>str</code>) - The category of reasons that the rules were broken with the project. Possible valid values are the following:<ul> <li><code>\"0\"</code> - The project is an exact copy of another project.</li> <li><code>\"1\"</code> - The project uses images or music without credit.</li> <li><code>\"3\"</code> - The project contains inappropriate language.</li> <li><code>\"4\"</code> - The project contains inappropriate music.</li> <li><code>\"5\"</code> - The project shares personal contact information.</li> <li><code>\"8\"</code> - The project contains inappropriate images.</li> <li><code>\"9\"</code> - The project is misleading or tricks the community.</li> <li><code>\"10\"</code> - The project contains a face reveal.</li> <li><code>\"11\"</code> - The project disallows remixing.</li> <li><code>\"12\"</code> - You are concerned about the creator's safety.</li> <li><code>\"13\"</code> - Some other reason.</li> <li><code>\"14\"</code> - The project contains scary images.</li> <li><code>\"15\"</code> - The project has a jumpscare.</li> <li><code>\"16\"</code> - The project contains a violent event.</li> <li><code>\"17\"</code> - The project contains realistic weapons.</li> <li><code>\"18\"</code> - The project threatens or bullies another Scratcher.</li> <li><code>\"19\"</code> - The project is disrespectful to a Scratcher or group.</li> </ul> </li> <li>reason (<code>str</code>) - Additional info regarding the location of the offending content within the project.</li> <li>image (<code>Optional[str | None]</code>) - The base-64-encoded thumbnail of the project.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.get_project(104).report(\"10\", \"the guy's face is in the project\")\n</code></pre>"},{"location":"reference/Project/#unshare","title":"<code>unshare()</code>","text":"<p>Unshares the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#share","title":"<code>share()</code>","text":"<p>Shares the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#delete","title":"<code>delete()</code>","text":"<p>Deletes the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#restore_deleted","title":"<code>restore_deleted()</code>","text":"<p>Restores the project if it has been deleted. You must be logged in, and the owner of the project, for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#view","title":"<code>view()</code>","text":"<p>Views the project (increments its view count). Returns an HTTP status code.</p> <p>Warning</p> <p>This is incredibly easy to abuse, but do not as the Scratch Team will not be happy, and they will be able to figure out who you are. Furthermore, this is heavily ratelimited, so it's not very effective anyway.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#set_thumbnail","title":"<code>set_thumbnail(file_or_data)</code>","text":"<p>Sets the thumbnail of the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <p>file_or_data (<code>bytes | str</code>) - The file that the thumbnail should be set to. If this is a <code>str</code>, then it will be interpreted as a path to a file; otherwise, it will be interpreted as the data in the image.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#set_title","title":"<code>set_title(title)</code>","text":"<p>Sets the title of the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <p>title (<code>str</code>) - The title that the title of the project should be set to.</p> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.get_project(130921903123).set_title(\"4D platformer #games #all ?mode=trending\")\n</code></pre>"},{"location":"reference/Project/#set_instructions","title":"<code>set_instructions(instructions)</code>","text":"<p>Sets the instructions of the project. You must be logged in, and the owner of the project, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <p>instructions (<code>str</code>) - The instructions that the instructions of the project should be set to.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Project/#set_description","title":"<code>set_description(description)</code>","text":"<p>Sets the description (the \"Notes and Credits\" field) of the project. Returns an HTTP status code.</p> <p>PARAMETERS</p> <p>description (<code>str</code>) - The description that the description of the project should be set to. You must be logged in, and the owner of the project, for this to not throw an error.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ProjectComment/","title":"ProjectComment","text":""},{"location":"reference/ProjectComment/#properties","title":"Properties","text":""},{"location":"reference/ProjectComment/#id","title":"<code>id : int</code>","text":"<p>The ID of the comment.</p>"},{"location":"reference/ProjectComment/#parent_id","title":"<code>parent_id : int | None</code>","text":"<p>If the comment is a reply, this is the ID of its parent comment. Otherwise, it is <code>None</code>.</p>"},{"location":"reference/ProjectComment/#commentee_id","title":"<code>commentee_id : int | None</code>","text":"<p>If the comment is a reply, this is the user ID of the author of the parent comment. Otherwise, it is <code>None</code>.</p>"},{"location":"reference/ProjectComment/#content","title":"<code>content : str</code>","text":"<p>The content of the comment.</p>"},{"location":"reference/ProjectComment/#reply_count","title":"<code>reply_count : int</code>","text":"<p>The number of replies the comment has. If the comment is a reply, this is simply <code>0</code>.</p>"},{"location":"reference/ProjectComment/#author","title":"<code>author : str</code>","text":"<p>The username of the author of the comment.</p>"},{"location":"reference/ProjectComment/#author_id","title":"<code>author_id : int</code>","text":"<p>The user ID of the author of the comment.</p>"},{"location":"reference/ProjectComment/#created_timestamp","title":"<code>created_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the comment was created.</p> <p>Example:</p> <pre><code>import datetime\n\ndef iso_to_readable(iso):\n    timezone = datetime.datetime.now(datetime.timezone.utc).astimezone().tzinfo\n\n    date = datetime.datetime.fromisoformat(iso.replace(\"Z\", \"+00:00\"))\n    date.astimezone(timezone)\n\n    return date.strftime(\"%Y-%m-%d %I:%M %p\")\n\nprint(session.get_project(104).get_comments()[0].created_timestamp)\n# 2022-08-04 10:47 AM\n</code></pre>"},{"location":"reference/ProjectComment/#last_modified_timestamp","title":"<code>last_modified_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the comment was last modified.</p> <p>Note</p> <p>I have no idea what the hell this means.</p>"},{"location":"reference/ProjectComment/#visible","title":"<code>visible : bool</code>","text":"<p>A boolean value representing whether the comment has been deleted or not.</p>"},{"location":"reference/ProjectComment/#project","title":"<code>project : Project</code>","text":"<p>The project that the comment is on, as a Project object.</p>"},{"location":"reference/ProjectComment/#methods","title":"Methods","text":""},{"location":"reference/ProjectComment/#delete","title":"<code>delete()</code>","text":"<p>Deletes the comment. You must be logged in and the owner of the project that the comment is on for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>project = session.get_project(193293231031)\nfor comment in project.get_comments(all=True):\n  if \"bad\" in comment.content:\n    comment.delete()\n</code></pre>"},{"location":"reference/ProjectComment/#report","title":"<code>report()</code>","text":"<p>Reports the comment. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ProjectComment/#reply","title":"<code>reply(content)</code>","text":"<p>Replies to the comment. You must be logged in for this to not throw an error. Returns the reply once it is posted as a ProjectComment.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content of your reply.</li> </ul> <p>RETURNS - <code>ProjectComment</code></p> <p>Example:</p> <pre><code>comment = session.get_project(104).get_comments()[0]\ncomment.reply(\"Go away\")\n</code></pre>"},{"location":"reference/ProjectComment/#get_replies","title":"<code>get_replies(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of replies to the comment. Returns an array of ProjectComment objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single reply or just <code>limit</code> replies.</li> <li>limit (<code>Optional[int]</code>) - How many replies to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the replies from the newest ones - i.e. an offset of 20 would give you the next 20 replies after the first 20.</li> </ul> <p>RETURNS - <code>list[ProjectComment]</code></p>"},{"location":"reference/RemixtreeProject/","title":"RemixtreeProject","text":"<p>A class that represents the project data that is used on Scratch's remix tree page.</p>"},{"location":"reference/RemixtreeProject/#properties","title":"Properties","text":""},{"location":"reference/RemixtreeProject/#title","title":"<code>title : str</code>","text":"<p>The title of the project.</p>"},{"location":"reference/RemixtreeProject/#id","title":"<code>id : int</code>","text":"<p>The project ID of the project.</p>"},{"location":"reference/RemixtreeProject/#author","title":"<code>author : str</code>","text":"<p>The username of the project's creator.</p> <p>An <code>IncompleteProject</code> might have other attributes depending on where it came from:</p>"},{"location":"reference/RemixtreeProject/#moderation_status","title":"<code>moderation_status : str</code>","text":"<p>The moderation status of the project. This is either <code>\"notreviewed\"</code> or <code>\"notsafe\"</code>. If it is <code>\"notsafe\"</code> (NSFE), this means the project can't show up in search results, the front page, or the trending page.</p> <p>Example:</p> <pre><code>def is_nsfe(project_id):\n  remixtree = session.get_project(project_id).get_remixtree()\n  try:\n    remixtree_project = next(project for project in remixtree if project.id == project_id)\n  except StopIteration:\n    # It's unknown since the project has no remix tree\n    return False\n\n  return remixtree_project.moderation_status == \"notsafe\"\n\nprint(is_nsfe(414601586))\n# True\n</code></pre> <p>Fun-fact</p> <p>Although you can easily determine whether a project is NSFE using this, you are not allowed to mention how to do this or say that a project is NSFE on Scratch. It's weird that they still include this in an API response, though. Just think of it as a little Easter Egg in Scratch's API.</p>"},{"location":"reference/RemixtreeProject/#visible","title":"<code>visible : bool</code>","text":"<p>A boolean value representing whether the project has been deleted or not.</p>"},{"location":"reference/RemixtreeProject/#is_published","title":"<code>is_published : bool</code>","text":"<p>A boolean value representing whether the project has been shared or not.</p>"},{"location":"reference/RemixtreeProject/#love_count","title":"<code>love_count : int</code>","text":"<p>The number of loves the project has.</p>"},{"location":"reference/RemixtreeProject/#favorite_count","title":"<code>favorite_count : int</code>","text":"<p>The number of favorites the project has.</p>"},{"location":"reference/RemixtreeProject/#created_timestamp","title":"<code>created_timestamp : int</code>","text":"<p>A Unix timestamp representing the date the project was created.</p> <p>Example:</p> <pre><code>import datetime\n\ndef unix_to_readable(unix):\n    timezone = datetime.datetime.now(datetime.timezone.utc).astimezone().tzinfo\n\n    date = datetime.datetime.fromtimestamp(unix)\n    date.astimezone(timezone)\n\n    return date.strftime(\"%Y-%m-%d %I:%M %p\")\n\nproject_104 = next(project for project in \nsession.get_project(104).get_remix_tree() if project.id == 104)\nprint(unix_to_readable(project_104.created_timestamp))\n# 2007-03-05 10:47 AM\n</code></pre>"},{"location":"reference/RemixtreeProject/#last_modified_timestamp","title":"<code>last_modified_timestamp : int</code>","text":"<p>A Unix timestamp timestamp representing the date the project was most recently modified.</p>"},{"location":"reference/RemixtreeProject/#shared_timestamp","title":"<code>shared_timestamp : int | None</code>","text":"<p>A Unix timestamp timestamp representing the date the project was shared.</p>"},{"location":"reference/RemixtreeProject/#parent_id","title":"<code>parent_id : int | None</code>","text":"<p>If the project is a remix, this is the ID of the project's parent project. Otherwise, it's <code>None</code>.</p>"},{"location":"reference/RemixtreeProject/#children","title":"<code>children : list[int]</code>","text":"<p>A list of the project IDs of the project's remixes.</p> <p>Note</p> <p>This can be used to determine the project's remixes much more quickly than <code>Project.get_remixes</code>.</p>"},{"location":"reference/ScrapingSession/","title":"ScrapingSession","text":"<p>Used to scrape data that isn't provided cleanly by Scratch's website.</p>"},{"location":"reference/ScrapingSession/#methods","title":"Methods","text":""},{"location":"reference/ScrapingSession/#get_follower_count","title":"<code>get_follower_count(user)</code>","text":"<p>Gets the follower count of a user.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the follower count of, or a corresponding object representing them.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScrapingSession/#get_following_count","title":"<code>get_following_count(user)</code>","text":"<p>Gets the number of users that a user is following.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the following count of, or a corresponding object representing them.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScrapingSession/#get_favorited_count","title":"<code>get_favorited_count(user)</code>","text":"<p>Gets the number of projects that a user has favorited.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the favorite count of, or a corresponding object representing them.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScrapingSession/#get_followed_studios_count","title":"<code>get_followed_studios_count(user)</code>","text":"<p>Gets the number of studios that a user has followed.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the followed studios count of, or a corresponding object representing them.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScrapingSession/#get_curated_studios_count","title":"<code>get_curated_studios_count(user)</code>","text":"<p>Gets the number of studios that a user curates.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the curated studios count of, or a corresponding object representing them.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScrapingSession/#get_shared_projects_count","title":"<code>get_shared_projects_count(user)</code>","text":"<p>Gets the number of projects that a user has shared.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the shared project count of, or a corresponding object representing them.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScrapingSession/#get_user_activity","title":"<code>get_user_activity(user, max=100000)</code>","text":"<p>Retrieves a user's activity as an array of Activity objects.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the activity of, or a corresponding object representing them.</li> <li>max (<code>int</code>) - The maximum amount of items you want to retrieve. Note that there is no harm in making this absurdly large, since user activity from before a year ago is not available.</li> </ul> <p>RETURNS - <code>list[Activity]</code></p> <p>Example:</p> <pre><code>print(session.scraping.get_user_activity(\"griffpatch\", max=1)[0].actor)\n# griffpatch\n</code></pre>"},{"location":"reference/ScrapingSession/#get_profile_comments","title":"<code>get_profile_comments(user, all=False, page=1)</code>","text":"<p>Gets a list of comments on a user's profile as an array of ProfileComment objects.</p> <p>PARAMETERS</p> <ul> <li>user (<code>User | IncompleteUser | str</code>) - The username of the user you want to retrieve the profile comments of, or a corresponding object representing them.</li> <li>all (<code>bool</code>) - Whether to retrieve all of the user's comments or just one page of them.</li> <li>page (<code>page</code>) - If <code>all</code> is <code>False</code>, this is the page of profile comments to retrieve.</li> </ul> <p>RETURNS - <code>list[ProfileComment]</code></p> <p>Example:</p> <pre><code>print(session.scraping.get_profile_comments(\"griffpatch\")[0].content)\n# Follow me please\n</code></pre>"},{"location":"reference/ScrapingSession/#get_signature","title":"<code>get_signature(post_id, as_html=False)</code>","text":"<p>Gets the signature at the bottom of a forum post with the specified ID.</p> <p>PARAMETERS</p> <ul> <li>post_id (<code>int</code>) - The ID of the post you want to retrieve the signature from.</li> <li>as_html (<code>bool</code>) - Whether you want the response in HTML or in BBCode. By default, the response is converted to BBCode.</li> </ul> <p>RETURNS - <code>str</code></p> <p>Example:</p> <pre><code>print(session.scraping.get_signature(5154718))\n# I use scratch.\n# GF: I'll dump you. BF: hex dump or binary dump?\n# ...\n</code></pre>"},{"location":"reference/ScratchSession/","title":"ScratchSession","text":""},{"location":"reference/ScratchSession/#ScratchSession","title":"<code>ScratchSession(username=None, password=None, session_id=None, token=None)</code>","text":"<p>Returns an object representing the user's current session. If a password is not passed, you could pass a session ID and a token to authenticate yourself.</p> <p>PARAMETERS</p> <ul> <li> <p>username (<code>str | None</code>) - The username of the user.</p> </li> <li> <p>password (<code>str | None</code>) - The password of the user's account - used to log in.</p> </li> <li> <p>session_id (<code>str | None</code>) - The session ID of the session - used to authenticate many requests.</p> </li> <li> <p>token (<code>str | None</code>) - The token of the user - used to authenticate many requests.</p> </li> </ul>"},{"location":"reference/ScratchSession/#properties","title":"Properties","text":""},{"location":"reference/ScratchSession/#username","title":"<code>username : str | None</code>","text":"<p>The username of the logged in user. Will be <code>None</code> if the user does not log in.</p>"},{"location":"reference/ScratchSession/#session_id","title":"<code>session_id : str | None</code>","text":"<p>The Scratch session ID of the logged in user's session. Required to authenticate most requests to Scratch's old site (scratchr2). Will be <code>None</code> if the user does not log in and no session ID is passed to <code>ScratchSession</code>.</p>"},{"location":"reference/ScratchSession/#token","title":"<code>token : str | None</code>","text":"<p>The token of the logged in user. Required to authenticate most requests to Scratch's new site (scratch-www). Will be <code>None</code> if the user does not log in and no token is passed to <code>ScratchSession</code>.</p>"},{"location":"reference/ScratchSession/#csrf_token","title":"<code>csrf_token : str | None</code>","text":"<p>The CSRF token of the logged in user's session. Required for most requests that need authentication. Will be <code>None</code> if the user does not log in or does not provide a session ID or a token.</p>"},{"location":"reference/ScratchSession/#logged_in","title":"<code>logged_in : bool</code>","text":"<p>Whether the user is logged in or not. This is <code>True</code> if the user logs in or provides a session ID or a token.</p>"},{"location":"reference/ScratchSession/#user","title":"<code>user : User</code>","text":"<p>The User object of the logged in user. Will be <code>None</code> if the user does not log in or does not provide a session ID or a token.</p> <p>Example:</p> <pre><code>session = ScratchSession(\"griffpatch\", \"realpassword\")\n\nprint(session.user.id)\n# 1882674\n</code></pre>"},{"location":"reference/ScratchSession/#forums","title":"<code>forums : ForumSession</code>","text":"<p>A ForumSession object that allows the user to do things with Scratch's forums.</p>"},{"location":"reference/ScratchSession/#scraping","title":"<code>scraping : ScrapingSession</code>","text":"<p>A ScrapingSession object that allows the user to scrape data off Scratch pages that are from the old site (scratchr2). These pages do not have JSON APIs, so it is necessary to scrape the HTML of the pages.</p> <pre><code>session = ScratchSession(\"griffpatch\", \"realpassword\")\n\nprint(session.scraping.get_profile_comments(\"ceebee\")[0].content)\n# Pls ban @griffpatch he is hacking my account\n</code></pre>"},{"location":"reference/ScratchSession/#methods","title":"Methods","text":""},{"location":"reference/ScratchSession/#get_user","title":"<code>get_user(user)</code>","text":"<p>Gets the User object of the specified username or user.</p> <p>PARAMETERS</p> <ul> <li>user (<code>str | IncompleteUser | User</code>) - The username of the user or an IncompleteUser or a User object representing it.</li> </ul> <p>RETURNS - <code>User</code></p> <p>Example:</p> <pre><code>print(session.get_user(\"griffpatch\").scratchteam)\n# False\n</code></pre>"},{"location":"reference/ScratchSession/#get_project","title":"<code>get_project(project)</code>","text":"<p>Gets the Project object for the specified ID or project.</p> <p>PARAMETERS</p> <ul> <li>project (<code>str | int | IncompleteProject | RemixtreeProject | Project</code>) - The ID of the project (as either a string or an integer) or an IncompleteProject, a RemixtreeProject, or a Project object representing it.</li> </ul> <p>RETURNS - <code>Project</code></p> <p>Example:</p> <pre><code>print(session.get_project(60917032).title)\n# Appel v1.4\n</code></pre>"},{"location":"reference/ScratchSession/#get_studio","title":"<code>get_studio(id)</code>","text":"<p>Gets the Studio object for the specified ID or studio.</p> <p>PARAMETERS</p> <ul> <li>studio (<code>str | int | IncompleteStudio | Studio</code>) - The ID of the studio (as either a string or an integer) or an IncompleteStudio or a Studio object representing it.</li> </ul> <p>RETURNS - <code>Studio</code></p> <p>Example:</p> <pre><code>print(session.get_studio(26135902).owner)\n# Za-Chary\n</code></pre>"},{"location":"reference/ScratchSession/#get_news","title":"<code>get_news(all=False, limit=20, offset=0)</code>","text":"<p>Gets Scratch's news as an array of News objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single news headline or only <code>limit</code> headlines.</li> <li>limit (<code>Optional[int]</code>) - How many news headlines to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) - The offset of the headlines from the newest ones - i.e. an offset of 20 would give you the next 20 headlines after the first 20.</li> </ul> <p>RETURNS - <code>list[News]</code></p> <p>Example:</p> <pre><code>print(session.get_news()[0].title)\n# Wiki Wednesday!\n</code></pre>"},{"location":"reference/ScratchSession/#get_messages","title":"<code>get_messages(all=False, limit=20, offset=0, filter=\"\")</code>","text":"<p>Gets the messages of the logged in user as an array of Message objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single message or only <code>limit</code> message.</li> <li>limit (<code>Optional[int]</code>) - How many news messages to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) - The offset of the messages from the newest ones - i.e. an offset of 20 would give you the next 20 messages after the first 20.</li> <li>filter (<code>Optional[Literal[\"\"] | Literal[\"comments\"] | Literal[\"projects\"] | Literal[\"studios\"] | Literal[\"forums\"]]</code>) - A filter to apply to the messages. Must be one of the following: an empty string, which does not filter out any messages; <code>\"comments\"</code>, which only includes comment activity; <code>\"projects\"</code>, which only includes project activity; <code>\"studios\"</code>, which only includes studio activity; or <code>\"forums\"</code>, which only includes forum activity.</li> </ul> <p>RETURNS - <code>list[Message]</code></p> <p>Example:</p> <pre><code>print(session.get_messages(all=True)[0].actor)\n# griffpatch\n\nprint(session.get_messages(limit=40, offset=10, filter=\"comments\")[0].comment_fragment)\n# thank you my friend\n</code></pre>"},{"location":"reference/ScratchSession/#create_cloud_connection","title":"<code>create_cloud_connection(project_id, is_async=False, cloud_host=\"clouddata.scratch.mit.edu\", headers={})</code>","text":"<p>Creates a cloud connection for the specified project ID. Returns a CloudConnection object if <code>is_async</code> is <code>False</code>, otherwise it returns an AsyncCloudConnection object.</p> <p>PARAMETERS</p> <ul> <li>project_id (<code>int | string</code>) - The ID of the project to make a connection to, represented as either a string or an integer.</li> <li>is_async (<code>Optional[bool]</code>) - Whether to return a <code>CloudConnection</code> or an <code>AsyncCloudConnection</code>. AsyncCloudConnection supports asyncio, whereas CloudConnection is completely synchronous.</li> <li>cloud_host (<code>Optional[str]</code>) - The hostname of the server where the cloud variables are hosted. By default, this is <code>\"clouddata.scratch.mit.edu\"</code>.</li> <li>headers (<code>dict</code>) - Any extra headers to add to the connection's handshake.</li> </ul> <p>RETURNS - <code>CloudConnection | AsyncCloudConnection</code></p> <p>Example:</p> <pre><code>connection = session.create_cloud_connection(104)\n\nprint(connection.get_cloud_variable('foo'))\n# 1391203129031\n</code></pre>"},{"location":"reference/ScratchSession/#explore_projects","title":"<code>explore_projects(mode=\"trending\", query=\"*\", language=\"en\")</code>","text":"<p>Explores Scratch projects with the specified <code>mode</code> (either <code>\"trending\"</code>, <code>\"popular\"</code>, or <code>\"recent\"</code>), query and language. Returns an array of Project objects.</p> <p>PARAMETERS</p> <ul> <li>mode (<code>Optional[Literal[\"trending\"] | Literal[\"popular\"] | Literal[\"recent\"]]</code>) - The basis of how the projects are sorted - \"trending\" projects were popular recently, \"popular\" projects are popular in general, and \"recent\" projects are recent in general.</li> <li>query (<code>Optional[str]</code>) - The query used to search for the projects.</li> <li>language (<code>Optional[str]</code>) - The language to search for projects in. Must be an ISO 639-1 code.</li> </ul> <p>RETURNS - <code>list[Project]</code></p> <p>Example:</p> <pre><code>print(session.explore_projects()[0].title)\n# Epic 7D platformer 2021\n</code></pre>"},{"location":"reference/ScratchSession/#explore_studios","title":"<code>explore_studios(mode=\"trending\", query=\"*\")</code>","text":"<p>Explores Scratch studios with the specified <code>mode</code> (either <code>\"trending\"</code>, <code>\"popular\"</code>, or <code>\"recent\"</code>) and query. Returns an array of Studio objects.</p> <p>PARAMETERS</p> <ul> <li>mode (<code>Optional[Literal[\"trending\"] | Literal[\"popular\"] | Literal[\"recent\"]]</code>) - The basis of how the studios are sorted - \"trending\" studios were popular recently, \"popular\" studios are popular in general, and \"recent\" studios are recent in general.</li> <li>query (<code>Optional[str]</code>) - The query used to search for the studios.</li> </ul> <p>RETURNS - <code>list[Studio]</code></p>"},{"location":"reference/ScratchSession/#search_projects","title":"<code>search_projects(mode=\"popular\", query=\"*\", language=\"en\")</code>","text":"<p>Searches Scratch projects with the specified <code>mode</code> (either <code>\"trending\"</code> or <code>\"popular\"</code>), <code>query</code>, and <code>language</code>. Returns an array of Project objects.</p> <p>PARAMETERS</p> <ul> <li>mode (<code>Optional[Literal[\"trending\"] | Literal[\"popular\"]]</code>) - The basis of how the projects are sorted - \"trending\" projects were popular recently and \"popular\" projects are popular in general.</li> <li>query (<code>Optional[str]</code>) - The query used to search for the projects.</li> <li>language (<code>Optional[str]</code>) - The language to search for projects in. Must be an ISO 639-1 code.</li> </ul> <p>RETURNS - <code>list[Project]</code></p>"},{"location":"reference/ScratchSession/#search_studios","title":"<code>search_studios(mode=\"popular\", query=\"*\")</code>","text":"<p>Searches Scratch studios with the specified <code>mode</code> and <code>query</code>. Returns an array of Studio objects.</p> <p>PARAMETERS</p> <ul> <li>mode (<code>Optional[Literal[\"trending\"] | Literal[\"popular\"]])</code> - The basis of how the studios are sorted - \"trending\" studios were popular recently and \"popular\" studios are popular in general.</li> <li>query (<code>Optional[str]</code>) - The query used to search for the studios.</li> </ul>"},{"location":"reference/ScratchSession/#get_front_page","title":"<code>get_front_page()</code>","text":"<p>Gets the data that is used for Scratch's front page. It returns a dictionary containing the following items:</p> <ul> <li><code>\"featured_projects\"</code> - Scratch's featured projects; an array of IncompleteProject objects.</li> <li><code>\"featured_studios\"</code> - Scratch's featured studios; an array of IncompleteStudio objects.</li> <li><code>\"top_loved\"</code> - the most loved recent projects; an array of IncompleteProject objects.</li> <li><code>\"top_remixed\"</code> - the most remixed recent projects; an array of IncompleteProject objects.</li> <li><code>\"newest\"</code> - new projects on Scratch; an array of IncompleteProject objects.</li> <li><code>\"scratch_design_studio\"</code> - projects in Scratch's Scratch Design Studio that are on the front page; an array of IncompleteProject objects.</li> <li><code>\"curated\"</code> - projects chosen by the Front Page Curator to be on the front page; an array of IncompleteProject objects.</li> <li><code>\"curator\"</code> - the current Front Page Curator; a <code>str</code> representing their username.</li> <li><code>\"current_sds\"</code> - the current Scratch Design Studio; an IncompleteStudio object.</li> </ul> <p>RETURNS - <code>dict</code></p>"},{"location":"reference/ScratchSession/#get_activity","title":"<code>get_activity(limit=5, offset=0)</code>","text":"<p>Gets your follower's activity (the What's Happening? on the front page). You must be logged in for this to not throw an error. Returns an array of Activity objects.</p> <p>PARAMETERS</p> <ul> <li>limit (<code>Optional[int]</code>) - How many activities to retrieve.</li> <li>offset (<code>Optional[int]</code>) - The offset of the activities from the newest ones - i.e. an offset of 5 would give you the next 5 activites after the first 5.</li> </ul> <p>RETURNS - <code>list[Activity]</code></p>"},{"location":"reference/ScratchSession/#create_project","title":"<code>create_project(project)</code>","text":"<p>Creates a project. You must be logged in for this to not throw an error. The project will contain the data in the parameter <code>project</code>, which should be structured like the <code>project.json</code> file in ordinary projects. Returns the ID of the project as an <code>int</code>.</p> <p>PARAMETERS</p> <ul> <li>project (<code>dict</code>) - The data to be put into the project.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>project_json = {\"targets\":[{\"isStage\":True,\"name\":\"Stage\",\"variables\":{\"`jEk@4|i[#Fk?(8x)AV.-my variable\":[\"my variable\",0]},\"lists\":{},\"broadcasts\":{},\"blocks\":{},\"comments\":{},\"currentCostume\":0,\"costumes\":[{\"name\":\"backdrop1\",\"dataFormat\":\"svg\",\"assetId\":\"cd21514d0531fdffb22204e0ec5ed84a\",\"md5ext\":\"cd21514d0531fdffb22204e0ec5ed84a.svg\",\"rotationCenterX\":240,\"rotationCenterY\":180}],\"sounds\":[{\"name\":\"pop\",\"assetId\":\"83a9787d4cb6f3b7632b4ddfebf74367\",\"dataFormat\":\"wav\",\"format\":\"\",\"rate\":48000,\"sampleCount\":1123,\"md5ext\":\"83a9787d4cb6f3b7632b4ddfebf74367.wav\"}],\"volume\":100,\"layerOrder\":0,\"tempo\":60,\"videoTransparency\":50,\"videoState\":\"on\",\"textToSpeechLanguage\":None},{\"isStage\":False,\"name\":\"Sprite1\",\"variables\":{},\"lists\":{},\"broadcasts\":{},\"blocks\":{},\"comments\":{},\"currentCostume\":0,\"costumes\":[{\"name\":\"costume1\",\"bitmapResolution\":1,\"dataFormat\":\"svg\",\"assetId\":\"bcf454acf82e4504149f7ffe07081dbc\",\"md5ext\":\"bcf454acf82e4504149f7ffe07081dbc.svg\",\"rotationCenterX\":48,\"rotationCenterY\":50},{\"name\":\"costume2\",\"bitmapResolution\":1,\"dataFormat\":\"svg\",\"assetId\":\"0fb9be3e8397c983338cb71dc84d0b25\",\"md5ext\":\"0fb9be3e8397c983338cb71dc84d0b25.svg\",\"rotationCenterX\":46,\"rotationCenterY\":53}],\"sounds\":[{\"name\":\"Meow\",\"assetId\":\"83c36d806dc92327b9e7049a565c6bff\",\"dataFormat\":\"wav\",\"format\":\"\",\"rate\":48000,\"sampleCount\":40681,\"md5ext\":\"83c36d806dc92327b9e7049a565c6bff.wav\"}],\"volume\":100,\"layerOrder\":1,\"visible\":True,\"x\":0,\"y\":0,\"size\":100,\"direction\":90,\"draggable\":False,\"rotationStyle\":\"all around\"}],\"monitors\":[],\"extensions\":[],\"meta\":{\"semver\":\"3.0.0\",\"vm\":\"0.2.0-prerelease.20220601111129\",\"agent\":\"Mozilla/5.0 (X11; CrOS x86_64 14588.123.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.72 Safari/537.36\"}}\n\nproject_id = session.create_project(project)\nsession.get_project(project_id).share()\n</code></pre>"},{"location":"reference/ScratchSession/#create_studio","title":"<code>create_studio()</code>","text":"<p>Creates a studio. You must be logged in for this to not throw an error. Returns the ID of the studio as an <code>int</code>.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScratchSession/#empty_trash","title":"<code>empty_trash(password)</code>","text":"<p>Empties your trash (your deleted projects). You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>password (<code>str</code>) - The password to your account. It's necessary to authenticate this for obvious reasons.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.get_project(104).delete()\nsession.empty_trash(\"hunter2\")\n</code></pre>"},{"location":"reference/ScratchSession/#get_own_projects","title":"<code>get_own_projects(all=False, sort=\"\", filter=\"all\", page=1)</code>","text":"<p>Gets your own projects, sorted in descending order. You must be logged in for this to not throw an error. Returns an array of Project objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optiona[boo]l</code>) - Whether to retrieve a single page of projects or all of them.</li> <li>sort (<code>Optional[Literal[\"\"] | Literal[\"view_count\"] | Literal[\"love_count\"] | Literal[\"remixers_count\"] | Literal[\"title\"]]</code>) - The metric used to sort the projects. Must be one of the following:<ul> <li><code>\"\"</code></li> <li><code>\"view_count\"</code></li> <li><code>\"love_count\"</code></li> <li><code>\"remixers_count\"</code></li> <li><code>\"title\"</code></li> </ul> </li> </ul> <p>If it is an empty string, it will be sorted by the date the project was modified.</p> <ul> <li>filter (<code>Optional[Literal[\"all\"] | Literal[\"shared\"] | Literal[\"notshared\"] | Literal[\"trashed\"]]</code>) - What the projects are filtered by. Must be one of the following:<ul> <li><code>\"all\"</code></li> <li><code>\"shared\"</code></li> <li><code>\"notshared\"</code></li> <li><code>\"trashed\"</code></li> </ul> </li> <li>page (<code>Optional[int]</code>) - The page of the data - page 1 has the projects that would be top, and they descend from there. Each page has 40 projects.</li> </ul> <p>RETURNS - <code>list[Project]</code></p> <p>Example:</p> <pre><code>print(str.format(\"My most loved deleted project is {}\", session.get_own_projects(sort=\"love_count\", filter=\"trashed\")[0].id))\n# My most loved deleted project is 104\n</code></pre>"},{"location":"reference/ScratchSession/#get_own_studios","title":"<code>get_own_studios(all=False, sort=\"\", page=1)</code>","text":"<p>Gets your own studios, sorted in descending order. You must be logged in for this to not throw an error. Returns an array of Studio objects. Note that the <code>Studio</code> objects that are returned do not have a <code>follower_count</code> or <code>manager_count</code> attribute but they do have a <code>curator_count</code> attribute.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve a single page of studios or all of them.</li> <li>sort (<code>Optional[Literal[\"\"] | Literal[\"projecters_count\"] | Literal[\"title\"]]</code>) - The metric used to sort the studios. Must be either <code>\"\"</code>, <code>\"projecters_count\"</code>, or <code>\"title\"</code>. If it is an empty string, it will be sorted by the date the studio was modified.</li> <li>page (<code>Optional[int]</code>) - The page of the data - page 1 has the studios that would be top, and they descend from there. Each page has 40 studios.</li> </ul> <p>RETURNS - <code>list[Studio]</code></p>"},{"location":"reference/ScratchSession/#upload_asset","title":"<code>upload_asset(asset, file_ext=None)</code>","text":"<p>Uploads an asset to <code>assets.scratch.mit.edu</code>. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>asset (<code>bytes | str</code>) - The asset that should be uploaded. If it is an instance of <code>bytes</code>, it will be interpreted as binary data, but if it is a <code>str</code>, it will be intepreted as a path to a file.</li> <li>file_ext (<code>Optional[str | None]</code>) - The file extension of the asset. It is only necessary when the <code>asset</code> parameter is a file name.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScratchSession/#change_country","title":"<code>change_country(country)</code>","text":"<p>Changes the logged in user's country. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>country (<code>str</code>) - The country that your country should be changed to.</li> </ul> <p>RETURNS: <code>int</code></p> <p>Example:</p> <pre><code>session.change_country(\"Antarctica\")\n</code></pre>"},{"location":"reference/ScratchSession/#change_password","title":"<code>change_password(old_password, new_password)</code>","text":"<p>Changes the logged in user's account's password. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>old_password (<code>str</code>) - Your account's current password (for authentication).</li> <li>new_password (<code>str</code>) - The password you want your account's password to be changed to.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScratchSession/#change_email","title":"<code>change_email(new_email, password)</code>","text":"<p>Changes the logged in user's account's email. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>new_emaiil (<code>str</code>) - The email you want your account's email to be changed to.</li> <li>password (<code>str</code>) - Your account's password (for authentication).</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/ScratchSession/#change_email_subscription","title":"<code>change_email_subscription(activities=False, teacher_tips=False)</code>","text":"<p>Sets what you will receive emails from Scratch for. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>activities (<code>Optional[bool]</code>) - Whether you'll receive emails for activity ideas for using Scratch at home.</li> <li>teacher_tips (<code>Optional[bool]</code>) - Whether you'll receive emails about product updates for using Scratch in educational settings.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.change_email_subscription(teacher_tips=True)\n# Now I will receive emails about product updates for using Scratch in educational settings\n</code></pre>"},{"location":"reference/ScratchSession/#get_backpack","title":"<code>get_backpack(all=False, limit=20, offset=0)</code>","text":"<p>Gets the data in your backpack. You must be logged in for thsi to not throw an error. Returns an array of BackpackItem objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve everything in your backpack or just <code>limit</code> items.</li> <li>limit (<code>Optional[int]</code>) - How many items to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) - The offset of the items from the newest ones - i.e. an offset of 20 would give you the next 20 items after the first 20.</li> </ul> <p>RETURNS - <code>list[BackpackItem]</code></p>"},{"location":"reference/ScratchSession/#add_to_backpack","title":"<code>add_to_backpack(item_type, body, mime_type, name, thumbnail)</code>","text":"<p>Adds an item to your backpack. You must be logged in for this to not throw an error. Returns the item put into the backpack as a BackpackItem object.</p> <p>PARAMETERS</p> <ul> <li>item_type (<code>Literal[\"script\"] | Literal[\"costume\"] | Literal[\"sound\"] | Literal[\"sprite\"]</code>) - The type of item to be put in the backpack. Must be one of the following:<ul> <li><code>\"script\"</code></li> <li><code>\"costume\"</code></li> <li><code>\"sound\"</code></li> <li><code>\"sprite\"</code></li> </ul> </li> <li>body (<code>str</code>) - The base-64-encoded data in the item. If the <code>item_type</code> of the item is <code>\"script\"</code> the data must be in the format that it is in the <code>project.json</code> file in ordinary projects. If the <code>item_type</code> is <code>\"sprite\"</code>, it must be a zipped version of the data in the format that it is in the <code>project.json</code> file in ordinary projects. Otherwise, it just has to be the data in the image of the costume or the sound file.</li> <li>mime_type (<code>Literal[\"application/zip\"] | Literal[\"application/json\"] | Literal[\"audio/x-wav\"] | Literal[\"audio/mp3\"] | Literal[\"image/svg+xml\"] | Literal[\"image/png\"]</code>) - The MIME type of the data. If the <code>item_type</code> is <code>\"script\"</code>, this must be <code>\"application/json\"</code>; if the <code>item_type</code> is <code>\"sprite\"</code>, this must be <code>\"application/zip\"</code>; if the <code>item_type</code> is <code>\"costume\"</code>, this must be <code>\"image/svg+xml\"</code> or <code>\"image/png\"</code>; and if the <code>item_type</code> is <code>\"sound\"</code>, this must be <code>\"audio/mp3\"</code> or <code>\"audio/x-wav\"</code>.</li> <li>name (<code>str</code>) - The name of the item to be added to the backpack. If the <code>item_type</code> is <code>\"costume\"</code>, <code>\"sound\"</code>, or <code>\"sprite\"</code>, this is merely the name of the costume, sound, or sprite. If the <code>item_type</code> is <code>\"script\"</code>, this must be the string <code>\"code\"</code>.</li> <li>thumbnail (<code>str</code>) - The base-64-encoded thumbnail of the item to be put in the backpack.</li> </ul> <p>RETURNS - <code>BackpackItem</code></p> <p>Example:</p> <pre><code>import base64\nfrom PIL import Image\nfrom io import BytesIO\n\ncostume_file = open(\"furry.png\", \"rb\")\nbody = base64.b64encode(costume_file.read())\n\nimage = Image.open(\"furry.png\")\nwith BytesIO() as f:\n    image.save(f, format=\"JPEG\")\n    thumbnail = base64.b64encode(f.getvalue())\n    session.add_to_backpack(\"costume\", body, \"image/png\", \"furry\", thumbnail)\n</code></pre>"},{"location":"reference/ScratchSession/#get_statistics","title":"<code>get_statistics()</code>","text":"<p>Gets site statistics for Scratch. Returns a dictionary with the following items:</p> <ul> <li><code>\"overall\"</code> - Overall data for Scratch; a dictionary with the following items:<ul> <li><code>\"COMMENT_COUNT\"</code> - The total number of comments on the site.</li> <li><code>\"PROFILE_COMMENT_COUNT</code>\" - The total number of profile comments on the site.</li> <li><code>\"PROJECT_COMMENT_COUNT\"</code> - The total number of project comments on the site.</li> <li><code>\"STUDIO_COMMENT_COUNT\"</code> - The total number of studio comments on the site.</li> <li><code>\"USER_COUNT\"</code> - The total number of users on the site.</li> <li><code>\"PROJECT_COUNT\"</code> - The total number of projects on the site.</li> <li><code>\"STUDIO_COUNT\"</code> - The total number of studios on the site.</li> </ul> </li> <li><code>\"last_month\"</code> - Site data for the past month; a dictionary with the following items:<ul> <li><code>\"pageviews\"</code> - The number of page views for Scratch over the past month.</li> <li><code>\"visits\"</code> - The number of visits to Scratch's website over the past month.</li> <li><code>\"users\"</code> - The number of unique visitors to Scratch over the past month.</li> </ul> </li> <li> <p><code>\"over_time\"</code> - Site data for Scratch over time, containing the data used to create graphs; a dictionary with the following items:      <ul> <li><code>\"activity_data\"</code> - Activity trends for Scratch over time. An array of dictionaries with the items <code>\"color\"</code> (a hex code), <code>\"key\"</code> (a <code>str</code>), and <code>\"values\"</code> (an array full of dictionaries containing X and Y coordinates).</li> <li><code>\"active_user_data\"</code> - Data on monthly active users on Scratch. An array of dictionaries with the items <code>\"color\"</code> (a hex code), <code>\"key\"</code> (a <code>str</code>), and <code>\"values\"</code> (an array full of dictionaries containing X and Y coordinates).</li> <li><code>\"age_distribution_data\"</code> - Data on the age distribution of new Scratchers. A dict with the following items:<ul> <li><code>\"key\"</code> - A <code>str</code> with the value <code>\"Registration age of Scratchers\"</code>.</li> <li><code>\"values\"</code> - An array full of dictionaries containing X and Y coordinates used to draw a histogram.</li> </ul> </li> <li> <p><code>\"country_distribution\"</code> - Data on the distribution of the locations of Scratchers. A dictionary with an item for each country, the value being the number of users from the country.</p> </li> <li> <p>Fun Fact</p> <pre><code>There used to be a bug allowing people to change their country to a two-letter code, and the data for those \"countries\" is still returned here. It also appears that a similar bug was used for 11 people to change their location to \"England\". Sadly, this bug does not work anymore.\n</code></pre> </li> <li> <p><code>\"comment_data\"</code> - Data on distribution of location of comment activity. An array of dictionaries with the items <code>\"color\"</code> (a hex code), <code>\"key\"</code> (a <code>str</code>), and <code>\"values\"</code> (an array full of dictionaries containing X and Y coordinates).</p> </li> <li><code>\"project_data\"</code> - Data on shared projects, representing the distribution of original projects vs. remixed projects. An array of dictionaries with the items <code>\"color\"</code> (a hex code), <code>\"key\"</code> (a <code>str</code>), and <code>\"values\"</code> (an array full of dictionaries containing X and Y coordinates). </li> </ul> <p>RETURNS - <code>dict</code></p> <p>Example:</p> <pre><code>print(str.format(\n    \"There have been {} users registered who are from England\",\n    session.get_statistics()[\"over_time\"][\"country_distribution\"][\"England\"],\n))\n# There have been 11 users registered who are from England\n</code></pre>"},{"location":"reference/ScratchSession/#is_valid_username","title":"<code>is_valid_username(username)</code>","text":"<p>Checks if a username can be registered. Returns a <code>bool</code> representing whether it can.</p> <p>PARAMETERS</p> <ul> <li>username (<code>str</code>) - The username to be checked for availability.</li> </ul> <p>RETURNS - <code>bool</code></p>"},{"location":"reference/ScratchSession/#check_password","title":"<code>check_password(password)</code>","text":"<p>Checks if the password passed is your account's password. You must be logged in for this to not throw an error. Returns a <code>bool</code> representing whether the password is valid.</p> <p>PARAMETERS</p> <ul> <li>password (<code>str</code>) - The password to be checked for validity.</li> </ul> <p>RETURNS - <code>bool</code></p>"},{"location":"reference/ScratchSession/#logout","title":"<code>logout()</code>","text":"<p>Logs out of Scratch. You must be logged in for this to not throw an error.</p>"},{"location":"reference/Studio/","title":"Studio","text":""},{"location":"reference/Studio/#properties","title":"Properties","text":""},{"location":"reference/Studio/#id","title":"<code>id : int</code>","text":"<p>The ID of the studio.</p> <p>Example:</p> <pre><code>print(session.get_studio(14).id)\n# 14\n</code></pre>"},{"location":"reference/Studio/#title","title":"<code>title : str</code>","text":"<p>The title of the studio.</p> <p>Example:</p> <pre><code>print(session.get_studio(14).title)\n# Citizen Schools @ ML-14\n</code></pre>"},{"location":"reference/Studio/#host","title":"<code>host : int</code>","text":"<p>The user ID of the host (owner) of the studio.</p>"},{"location":"reference/Studio/#description","title":"<code>description : str</code>","text":"<p>The description of the studio.</p>"},{"location":"reference/Studio/#visible","title":"<code>visible : bool</code>","text":"<p>A boolean value representing whether the studio is deleted or not.</p>"},{"location":"reference/Studio/#open_to_public","title":"<code>open_to_public : bool</code>","text":"<p>A boolean value representing whether anyone can add projects to the studio.</p>"},{"location":"reference/Studio/#comments_allowed","title":"<code>comments_allowed : bool</code>","text":"<p>A boolean value representing if comments are allowed on the studio.</p>"},{"location":"reference/Studio/#thumbnail_URL","title":"<code>thumbnail_URL : str</code>","text":"<p>The URL of the thumbnail of the studio.</p>"},{"location":"reference/Studio/#created_timestamp","title":"<code>created_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the studio was created.</p> <p>Example:</p> <pre><code>import datetime\n\ndef iso_to_readable(iso):\n    timezone = datetime.datetime.now(datetime.timezone.utc).astimezone().tzinfo\n\n    date = datetime.datetime.fromisoformat(iso.replace(\"Z\", \"+00:00\"))\n    date.astimezone(timezone)\n\n    return date.strftime(\"%Y-%m-%d %I:%M %p\")\n\nprint(iso_to_readable(session.get_studio(14).created_timestamp))\n# 2008-05-03 1:01 PM\n</code></pre>"},{"location":"reference/Studio/#last_modified_timestamp","title":"<code>last_modified_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the description or thumbnail of the studio was most recently modified.</p>"},{"location":"reference/Studio/#curator_count","title":"<code>curator_count : int | None</code>","text":"<p>The number of curators the studio has.</p>"},{"location":"reference/Studio/#follower_count","title":"<code>follower_count : int | None</code>","text":"<p>The number of followers the studio has.</p>"},{"location":"reference/Studio/#manager_count","title":"<code>manager_count : int | None</code>","text":"<p>The number of managers the studio has.</p>"},{"location":"reference/Studio/#curator_count","title":"<code>curator_count : int | None</code>","text":"<p>The number of curators the studio has.</p>"},{"location":"reference/Studio/#project_count","title":"<code>project_count : int | None</code>","text":"<p>The number of projects the studio has.</p>"},{"location":"reference/Studio/#methods","title":"Methods","text":""},{"location":"reference/Studio/#get_comment","title":"<code>get_comment(comment_id)</code>","text":"<p>Gets a comment on the studio with the ID <code>comment_id</code> as a StudioComment object.</p> <p>PARAMETERS</p> <ul> <li>comment_id (<code>int</code>) - The comment ID of the comment to be retrieved</li> </ul> <p>RETURNS - <code>StudioComment</code></p> <p>Example:</p> <pre><code>print(session.get_studio(14).get_comment(25224).content)\n# I was born there\n</code></pre>"},{"location":"reference/Studio/#add_project","title":"<code>add_project(project)</code>","text":"<p>Adds a project to the studio. You must be logged in and have permission to add projects to the studio for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>project (<code>int | str | IncompleteProject | RemixtreeProject | Project</code>) - The project to be added to the studio, either as an <code>int</code> or <code>str</code> representing the project's ID, or a corresponding project object.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#remove_project","title":"<code>remove_project(project)</code>","text":"<p>Removes a project from the studio. You must be logged in and be a curator of the studio for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>project (<code>int | str | IncompleteProject | RemixtreeProject | Project</code>) - The project to be removed from the studio, either as an <code>int</code> or <code>str</code> representing the project's ID, or a corresponding project object.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#get_projects","title":"<code>get_projects(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of projects in the studio. Returns an array of Project objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single project or just <code>limit</code> projects.</li> <li>limit (<code>Optional[int]</code>) - How many projects to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the projects from the newest ones - i.e. an offset of 20 would give you the next 20 projects after the first 20.</li> </ul> <p>RETURNS - <code>list[Project]</code></p> <p>Example:</p> <pre><code>print(session.get_studio(14).get_projects()[0].title)\n# football, basket and baseball\n</code></pre>"},{"location":"reference/Studio/#get_curators","title":"<code>get_curators(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of the curators of the studio. Returns an array of User objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single curator or just <code>limit</code> curators.</li> <li>limit (<code>Optional[int]</code>) - How many curators to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the curators from the newest ones - i.e. an offset of 20 would give you the next 20 curators after the first 20.</li> </ul> <p>RETURNS - <code>list[User]</code></p> <p>Example:</p> <pre><code>print(session.get_studio(30136012).get_curators()[0].username)\n# wvj\n</code></pre>"},{"location":"reference/Studio/#get_managers","title":"<code>get_managers(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of the managers of the studio. Returns an array of User objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single manager or just <code>limit</code> managers.</li> <li>limit (<code>Optional[int]</code>) - How many managers to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the managers from the newest ones - i.e. an offset of 20 would give you the next 20 managers after the first 20.</li> </ul> <p>RETURNS - <code>list[User]</code></p> <p>Example:</p> <pre><code>print(session.get_studio(30136012).get_managers()[0].username)\n# CatsUnited\n</code></pre>"},{"location":"reference/Studio/#get_roles","title":"<code>get_roles()</code>","text":"<p>Retrieves the roles the logged-in user has in the studio. You must be logged in for this to not throw an error. Returns a <code>dict</code> containing the following items:</p> <ul> <li>manager (<code>bool</code>) - Whether you are a manager of the studio.</li> <li>curator (<code>bool</code>) - Whether you are a curator of the studio.</li> <li>invited (<code>bool</code>) - Whether you have a pending invitation to the studio.</li> <li>following (<code>bool</code>) - Whether you are following the studio.</li> </ul> <p>RETURNS - <code>dict</code></p> <p>Example:</p> <pre><code>studio = session.get_studio(14)\nprint(studio.get_roles()[\"following\"])\n# False\nstudio.follow()\nprint(studio.get_roles()[\"following\"])\n# True\n</code></pre>"},{"location":"reference/Studio/#follow","title":"<code>follow()</code>","text":"<p>Follows the studio. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#unfollow","title":"<code>unfollow()</code>","text":"<p>Unfollows the studio. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#open_to_public","title":"<code>open_to_public()</code>","text":"<p>Opens the studio to the public so anyone can add projects. You must be logged in and a manager of the studio for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#close_to_public","title":"<code>close_to_public()</code>","text":"<p>Closes the studio to the public so only curators can add projects. You must be logged in and a manager of the studio for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#toggle_commenting","title":"<code>toggle_commenting()</code>","text":"<p>Toggles the ability for people to comment in the studio. You must be logged in and a manager of the studio for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>studio = session.get_studio(30136012)\nstudio.post_comment(\"Scratch sucks so I'm closing this studio\")\nstudio.toggle_commenting()\n</code></pre>"},{"location":"reference/Studio/#get_comments","title":"<code>get_comments(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of comments on the studio. Returns an array of StudioComment objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single comment or just <code>limit</code> comments.</li> <li>limit (<code>Optional[int]</code>) - How many comments to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the comments from the newest ones - i.e. an offset of 20 would give you the next 20 comments after the first 20.</li> </ul> <p>RETURNS - <code>list[StudioComment]</code></p> <p>Example:</p> <pre><code>print(session.get_studio(30136012).get_comments()[0].content)\n# hot take: we should ban all people that don't like scratch\n</code></pre>"},{"location":"reference/Studio/#get_activity","title":"<code>get_activity(all=False, limit=20, offset=0)</code>","text":"<p>Gets the activity in the studio. Returns an array of Activity objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single activity or just <code>limit</code> activities.</li> <li>limit (<code>Optional[int]</code>) - How many activities to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the activities from the newest ones - i.e. an offset of 20 would give you the next 20 activities after the first 20.</li> </ul> <p>RETURNS - <code>list[Activity]</code></p> <p>Example:</p> <pre><code>print(session.get_studio(30136012).get_activity()[0].type)\n# addprojectostudio\n</code></pre>"},{"location":"reference/Studio/#post_comment","title":"<code>post_comment(content, parent_id=\"\", commentee_id=\"\")</code>","text":"<p>Posts a comment on the studio. You must be logged in for this to not throw an error. Returns the posted comment as a <code>StudioComment</code>.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content of the comment to be posted.</li> <li>parent_id (<code>Optional[Literal[\"\"] | int]</code>) - If the comment to be posted is a reply, this is the comment ID of the parent comment. Otherwise, this is an empty string <code>\"\"</code>.</li> <li>commentee_id (<code>Optiona[Literal[\"\"] | int]</code>) - If the comment to be posted is a reply, this is the user ID of the author of the parent comment. Otherwise, this an empty string <code>\"\"</code>.</li> </ul> <p>RETURNS - <code>StudioComment</code></p> <p>Example:</p> <pre><code>session.get_project(14).post_comment(\"OMG first studio on Scratch\")\nsession.get_project(14).post_comment(\"OMG first comment on the first studio on scratch\", parent_id=25224, commentee_id=35153)\n</code></pre>"},{"location":"reference/Studio/#delete_comment","title":"<code>delete_comment(comment_id)</code>","text":"<p>Deletes a comment on the studio. You must be logged in, a manager of the studio, and the author of the comment, for this to not throw an error. Returns an HTTP status code.</p> <p>Warning</p> <p>This is deprecated. It's recommended to use <code>StudioComment.delete</code> instead. See this for more details.</p> <p>PARAMETERS</p> <ul> <li>comment_id (<code>int</code>) - The ID of the comment to be deleted.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#report_comment","title":"<code>report_comment(comment_id)</code>","text":"<p>Reports a comment on the studio. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>Warning</p> <p>This is deprecated. It's recommended to use <code>StudioComment.report</code> instead. See this for more details.</p> <p>PARAMETERS</p> <ul> <li>comment_id (<code>int</code>) - The ID of the comment to be reported.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#invite_curator","title":"<code>invite_curator(user)</code>","text":"<p>Invites a user to become a curator of the studio. You must be logged in, and a manager of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>user (<code>str | User | IncompleteUser</code>) - The username of the user to be invited, or an object representing the user.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#accept_curator","title":"<code>accept_curator(user)</code>","text":"<p>Accepts any pending curator invitations to the studio. You must be logged in, and having been invited to be a curator of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#promote_curator","title":"<code>promote_curator(user)</code>","text":"<p>Promotes a user to a manager of the studio. You must be logged in, and a manager of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>user (<code>str | User | IncompleteUser</code>) - The username of the user to be promoted, or an object representing the user. The user must already be a curator for this to not throw an error.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#transfer_host","title":"<code>transfer_host(user, password)</code>","text":"<p>Transfers ownership of the studio. You must be logged in, and the host of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>user (<code>str | User | IncompleteUser</code>) - The username of the user that will become the new host, or an object representing the user. The user must already be a manager for this to not throw an error.</li> <li>password (<code>str</code>) - The password to your account. This is necessary for authentication.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#set_description","title":"<code>set_description(description)</code>","text":"<p>Sets the description of the studio. You must be logged in, and the host of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <p>description (<code>str</code>) - The description that the description of the studio should be set to.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#set_title","title":"<code>set_title(content)</code>","text":"<p>Sets the title of the studio. You must be logged in, and the host of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <p>content (<code>str</code>) - The title that the title of the studio should be set to.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#set_thumbnail","title":"<code>set_thumbnail(file_or_data)</code>","text":"<p>Sets the thumbnail of the studio. You must be logged in, and the host of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <p>file_or_data (<code>bytes | str</code>) - The file that the thumbnail should be set to. If this is a <code>str</code>, then it will be interpreted as a path to a file; otherwise, it will be interpreted as the data in the image.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/Studio/#delete","title":"<code>delete()</code>","text":"<p>Deletes the studio. You must be logged in, and the host of the studio, for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/StudioComment/","title":"StudioComment","text":""},{"location":"reference/StudioComment/#properties","title":"Properties","text":""},{"location":"reference/StudioComment/#id","title":"<code>id : int</code>","text":"<p>The ID of the comment.</p>"},{"location":"reference/StudioComment/#parent_id","title":"<code>parent_id : int | None</code>","text":"<p>If the comment is a reply, this is the ID of its parent comment. Otherwise, it is <code>None</code>.</p>"},{"location":"reference/StudioComment/#commentee_id","title":"<code>commentee_id : int | None</code>","text":"<p>If the comment is a reply, this is the user ID of the author of the parent comment. Otherwise, it is <code>None</code>.</p>"},{"location":"reference/StudioComment/#content","title":"<code>content : str</code>","text":"<p>The content of the comment.</p>"},{"location":"reference/StudioComment/#reply_count","title":"<code>reply_count : int</code>","text":"<p>The number of replies the comment has. If the comment is a reply, this is simply <code>0</code>.</p>"},{"location":"reference/StudioComment/#author","title":"<code>author : str</code>","text":"<p>The username of the author of the comment.</p>"},{"location":"reference/StudioComment/#author_id","title":"<code>author_id : int</code>","text":"<p>The user ID of the author of the comment.</p>"},{"location":"reference/StudioComment/#created_timestamp","title":"<code>created_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the comment was created.</p> <p>Example:</p> <pre><code>import datetime\n\ndef iso_to_readable(iso):\n    timezone = datetime.datetime.now(datetime.timezone.utc).astimezone().tzinfo\n\n    date = datetime.datetime.fromisoformat(iso.replace(\"Z\", \"+00:00\"))\n    date.astimezone(timezone)\n\n    return date.strftime(\"%Y-%m-%d %I:%M %p\")\n\nprint(session.get_studio(14).get_comments()[0].created_timestamp)\n# 2022-08-04 10:47 AM\n</code></pre>"},{"location":"reference/StudioComment/#last_modified_timestamp","title":"<code>last_modified_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the comment was last modified.</p> <p>Note</p> <p>I have no idea what the hell this means.</p>"},{"location":"reference/StudioComment/#visible","title":"<code>visible : bool</code>","text":"<p>A boolean value representing whether the comment has been deleted or not.</p>"},{"location":"reference/StudioComment/#studio","title":"<code>studio : Studio</code>","text":"<p>The studio that the comment is on, as a Studio object.</p>"},{"location":"reference/StudioComment/#methods","title":"Methods","text":""},{"location":"reference/StudioComment/#delete","title":"<code>delete()</code>","text":"<p>Deletes the comment. You must be logged in, the author of the comment, and a manager of the studio that the comment is on for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>studio = session.get_studio(193293231031)\nfor comment in studio.get_comments(all=True):\n  if \"scratch\" in comment.content:\n    comment.delete()\n</code></pre>"},{"location":"reference/StudioComment/#report","title":"<code>report()</code>","text":"<p>Reports the comment. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p>"},{"location":"reference/StudioComment/#reply","title":"<code>reply(content)</code>","text":"<p>Replies to the comment. You must be logged in for this to not throw an error. Returns the reply once it is posted as a StudioComment.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content of your reply.</li> </ul> <p>RETURNS - <code>StudioComment</code></p> <p>Example:</p> <pre><code>comment = session.get_studio(14).get_comments()[0]\ncomment.reply(\"Go away\")\n</code></pre>"},{"location":"reference/StudioComment/#get_replies","title":"<code>get_replies(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of replies to the comment. Returns an array of StudioComment objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single reply or just <code>limit</code> replies.</li> <li>limit (<code>Optional[int]</code>) - How many replies to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the replies from the newest ones - i.e. an offset of 20 would give you the next 20 replies after the first 20.</li> </ul> <p>RETURNS - <code>list[StudioComment]</code></p>"},{"location":"reference/User/","title":"User","text":""},{"location":"reference/User/#properties","title":"Properties","text":""},{"location":"reference/User/#username","title":"<code>username : str</code>","text":"<p>The username of the user.</p> <p>Example:</p> <pre><code>print(session.get_user(\"you\").username)\n# you\n</code></pre>"},{"location":"reference/User/#id","title":"<code>id : int</code>","text":"<p>The ID of the user.</p>"},{"location":"reference/User/#joined_timestamp","title":"<code>joined_timestamp : str</code>","text":"<p>An ISO 8601 timestamp representing the date the user joined Scratch.</p>"},{"location":"reference/User/#scratchteam","title":"<code>scratchteam : bool</code>","text":"<p>A <code>bool</code> representing whether the user is a member of the Scratch Team.</p>"},{"location":"reference/User/#profile","title":"<code>profile : UserProfile</code>","text":"<p>A UserProfile object representing data related to the user's profile.</p> <p>Example:</p> <pre><code>print(session.get_user(\"mres\").profile.bio)\n# I'm a professor at MIT Media Lab. But more important: I'm one of the people who created Scratch!\n</code></pre>"},{"location":"reference/User/#methods","title":"Methods","text":""},{"location":"reference/User/#get_projects","title":"<code>get_projects(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of the user's shared projects. Returns an array of Project objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single project or just <code>limit</code> projects.</li> <li>limit (<code>Optional[int]</code>) - How many projects to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the projects from the newest ones - i.e. an offset of 20 would give you the next 20 projects after the first 20.</li> </ul> <p>RETURNS - <code>list[Project]</code></p> <p>Example:</p> <pre><code>print(session.get_user(\"griffpatch\").get_projects(all=True)[-1].title)\n# Pacman HD with full Ghost AI (Scratch 2)\n</code></pre>"},{"location":"reference/User/#get_curating","title":"<code>get_curating(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of studios the user is curating. Returns an array of Studio objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single studio or just <code>limit</code> studios.</li> <li>limit (<code>Optional[int]</code>) - How many studios to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the studios from the newest ones - i.e. an offset of 20 would give you the next 20 studios after the first 20.</li> </ul> <p>RETURNS - <code>list[Studio]</code></p> <p>Example:</p> <pre><code>print(session.get_user(\"griffpatch\").get_studios()[0].title)\n# The Scratchnapped Series (The epic adventures of Scratch?)\n</code></pre>"},{"location":"reference/User/#get_favorites","title":"<code>get_favorites(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of projects the user has favorited. Returns an array of Project objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single project or just <code>limit</code> projects.</li> <li>limit (<code>Optional[int]</code>) - How many projects to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the projects from the newest ones - i.e. an offset of 20 would give you the next 20 projects after the first 20.</li> </ul> <p>RETURNS - <code>list[Project]</code></p>"},{"location":"reference/User/#get_followers","title":"<code>get_followers(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of users that are following the user. Returns an array of User objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single follower or just <code>limit</code> followers.</li> <li>limit (<code>Optional[int]</code>) - How many followers to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the followers from the newest ones - i.e. an offset of 20 would give you the next 20 followers after the first 20.</li> </ul> <p>RETURNS - <code>list[User]</code></p> <p>Example:</p> <pre><code>print(session.get_user(\"griffpatch\").get_followers()[0].username)\n# kaj\n</code></pre>"},{"location":"reference/User/#get_following","title":"<code>get_following(all=False, limit=20, offset=0)</code>","text":"<p>Gets a list of users that the user is following. Returns an array of User objects.</p> <p>PARAMETERS</p> <ul> <li>all (<code>Optional[bool]</code>) - Whether to retrieve every single user or just <code>limit</code> users.</li> <li>limit (<code>Optional[int]</code>) - How many users to retrieve if <code>all</code> is <code>False</code>.</li> <li>offset (<code>Optional[int]</code>) -  The offset of the users from the newest ones - i.e. an offset of 20 would give you the next 20 users after the first 20.</li> </ul> <p>RETURNS - <code>list[User]</code></p> <p>Example:</p> <pre><code>print(session.get_user(\"World_Languages\").get_following()[0].username)\n# RykerJohnson\n</code></pre>"},{"location":"reference/User/#get_message_count","title":"<code>get_message_count()</code>","text":"<p>Gets the message count of the user. Returns an <code>int</code> with the user's message count.</p> <p>Info</p> <p>Scratch has historically tried to block requests that are trying to retrieve message counts. To prevent weird errors or further restrictions, try to use this sparingly.</p> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>print(session.get_user(\"isthistaken123\").get_message_count())\n# 90722\n</code></pre>"},{"location":"reference/User/#post_comment","title":"<code>post_comment(content, parent_id=\"\", commentee_id=\"\")</code>","text":"<p>Posts a comment on the user's profile. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content of the comment to be posted.</li> <li>parent_id (<code>Optional[Literal[\"\"] | int]</code>) - If the comment to be posted is a reply, this is the comment ID of the parent comment. Otherwise, this is an empty string <code>\"\"</code>.</li> <li>commentee_id (<code>Optiona[Literal[\"\"] | int]</code>) - If the comment to be posted is a reply, this is the user ID of the author of the parent comment. Otherwise, this an empty string <code>\"\"</code>.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.get_user(\"isthistaken123\").post_comment(\"hello my friend\", parent_id=140441449, commentee_id=143585)\nsession.get_user(\"griffpatch\").post_comment(\"f4f?!?!?!\")\n</code></pre>"},{"location":"reference/User/#delete_comment","title":"<code>delete_comment(comment_id)</code>","text":"<p>Deletes a comment on the user's profile with the specified <code>comment_id</code>. You must be logged in, and be the owner of the profile, for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>comment_id (<code>int</code>) - The ID of the comment to be deleted.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/User/#report_comment","title":"<code>report_comment(comment_id)</code>","text":"<p>Reports a comment on the user's profile with the specified <code>comment_id</code>. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>comment_id (<code>int</code>) - The ID of the comment to be reported.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/User/#report","title":"<code>report(field)</code>","text":"<p>Reports the user for the reason specified in the <code>field</code> parameter. You must be logged in for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>field (<code>Literal[\"username\"] | Literal[\"icon\"] | Literal[\"description\"] | Literal[\"working_on\"]</code>) - The section of the user's profile that you are reporting them for. A value of <code>\"username\"</code> represents the user's username, a value of <code>\"icon\"</code> represents the user's avatar, a value of <code>\"description\"</code> represents the \"About Me\" section of the user's profile, and a value of <code>\"working_on\"</code> represents the \"What I'm Working On\" section of the user's profile.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example <pre><code>session.get_user(\"griffpatch_alt\").report(\"username\")\n</code></pre></p>"},{"location":"reference/User/#toggle_comments","title":"<code>toggle_commenting()</code>","text":"<p>Toggles whether people can post comments on the user's profile. You must be logged in, and the owner of the profile, for this to not throw an error. Returns an HTTP status code.</p> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.user.post_comment(\"Aight im leaving scratch, unless I can get 4000 followers by tonight im out\")\nsession.user.toggle_commenting()\n</code></pre>"},{"location":"reference/User/#follow","title":"<code>follow()</code>","text":"<p>Follows the user. You must be logged in for this to not throw an error. Returns a <code>dict</code> with general data about the user's profile.</p> <p>RETURNS - <code>dict</code></p> <p>Example <pre><code>session.get_user('griffpatch').follow()\n</code></pre></p>"},{"location":"reference/User/#unfollow","title":"<code>unfollow()</code>","text":"<p>Unfollows the user. You must be logged in for this to not throw an error. Returns a <code>dict</code> with general data about the user's profile.</p> <p>RETURNS - <code>dict</code></p> <p>Example <pre><code>griffpatch = session.get_user('griffpatch')\n\ngriffpatch.unfollow()\ngriffpatch.post_comment(\"I thought we promised we'd do f4f :(\")\n</code></pre></p>"},{"location":"reference/UserProfile/","title":"UserProfile","text":""},{"location":"reference/UserProfile/#properties","title":"Properties","text":""},{"location":"reference/UserProfile/#user","title":"<code>user : User</code>","text":"<p>A User object representing the user whose profile it is.</p> <p>Example:</p> <pre><code>profile = session.get_user(\"griffpatch\").profile\nprint(profile.user.id)\n# 1882674\n</code></pre>"},{"location":"reference/UserProfile/#username","title":"<code>username : str</code>","text":"<p>The username of the owner of the profile.</p>"},{"location":"reference/UserProfile/#id","title":"<code>id : int</code>","text":"<p>The user's profile ID. This is not the same as their user ID.</p> <p>Example:</p> <pre><code>print(session.get_user(\"griffpatch\").profile.id)\n# 1267661\n</code></pre>"},{"location":"reference/UserProfile/#avatar_URL","title":"<code>avatar_URL : str</code>","text":"<p>The URL of the user's avatar (profile picture).</p>"},{"location":"reference/UserProfile/#bio","title":"<code>bio : str</code>","text":"<p>The user's bio (the \"About Me\" section of their profile).</p>"},{"location":"reference/UserProfile/#status","title":"<code>status : str</code>","text":"<p>The user's status (the \"What I'm Working On\" section of their profile).</p>"},{"location":"reference/UserProfile/#country","title":"<code>country : str</code>","text":"<p>The user's country (location).</p> <pre><code>print(session.get_user(\"griffpatch\").profile.country)\n# United Kingdom\n</code></pre>"},{"location":"reference/UserProfile/#methods","title":"Methods","text":""},{"location":"reference/UserProfile/#set_bio","title":"<code>set_bio(content)</code>","text":"<p>Sets the bio (\"About Me\" section) of the user's profile to the specified content. You must be logged in and the owner of the profile for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content that you want to set the bio to.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>profile = session.user.profile\n\nprofile.set_bio(\"I love Scratch :D\")\nprint(profile.bio)\n# I love Scratch :D\n</code></pre>"},{"location":"reference/UserProfile/#set_status","title":"<code>set_status(content)</code>","text":"<p>Sets the status (\"What I'm Working On\" section) of the user's profile to the specified content. You must be logged in and the owner of the profile for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>content (<code>str</code>) - The content that you want to set the status to.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/UserProfile/#set_avatar","title":"<code>set_avatar(filename)</code>","text":"<p>Sets the user's avatar (profile picture) to the file with the specified <code>filename</code>. You must be logged in and the owner of the profile for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>filename (<code>str</code>) - The path to a file containing the avatar image. Note that this must be a file, not binary data; if you wish to use binary data, you could try writing the data to a temporary file, then deleting it afterwards.</li> </ul> <p>RETURNS - <code>int</code></p>"},{"location":"reference/UserProfile/#get_featured_project","title":"<code>get_featured_project()</code>","text":"<p>Retrieves the featured project of the user. Returns an IncompleteProject object representing the project.</p> <p>RETURNS - <code>IncompleteProject</code></p> <p>Example:</p> <pre><code>print(session.get_user(\"griffpatch\").get_featured_project().id)\n# 10128407\n</code></pre>"},{"location":"reference/UserProfile/#set_featured_project","title":"<code>set_featured_project(label, project)</code>","text":"<p>Sets the user's featured project on their profile. You must be logged in and the owner of the profile for this to not throw an error. Returns an HTTP status code.</p> <p>PARAMETERS</p> <ul> <li>label (<code>str</code>) - The label to go above the featured project. Must be one of the following strings:<ul> <li><code>\"featured_project\"</code> - Representing \"Featured Project\".</li> <li><code>\"featured_tutorial\"</code> - Representing \"Featured Tutorial\".</li> <li><code>\"work_in_progress\"</code> - Representing \"Work In Progress\".</li> <li><code>\"remix_this\"</code> - Representing \"Remix This\".</li> <li><code>\"my_favorite_things\"</code> - Representing \"My Favorite Things\".</li> <li><code>\"why_i_scratch\"</code> - Representing \"Why I Scratch\".</li> </ul> </li> <li>project (<code>int | Project | IncompleteProject | RemixtreeProject</code>) - The project to be set as the featured project. This must either be an <code>int</code> representing the project's ID or a corresponding project object.</li> </ul> <p>RETURNS - <code>int</code></p> <p>Example:</p> <pre><code>session.user.profile.set_featured_project(\"why_i_scratch\", 321079301972)\nprint(session.user.profile.get_featured_project())\n# furry art compilation\n</code></pre>"}]}